{"ast":null,"code":"import { extend, closest, isNullOrUndefined, getElement, isBlazor } from '@syncfusion/ej2-base';\nimport * as event from '../base/constant';\nimport * as cls from '../base/css-constant';\n/**\n * Work cell interactions\n */\n\nvar WorkCellInteraction =\n/** @class */\nfunction () {\n  function WorkCellInteraction(parent) {\n    this.parent = parent;\n  }\n\n  WorkCellInteraction.prototype.cellMouseDown = function (e) {\n    if (this.isPreventAction(e)) {\n      return;\n    }\n\n    this.parent.notify(event.cellMouseDown, {\n      event: e\n    });\n  };\n\n  WorkCellInteraction.prototype.cellClick = function (e) {\n    var _this = this;\n\n    if (this.isPreventAction(e)) {\n      return;\n    }\n\n    var queryStr = '.' + cls.WORK_CELLS_CLASS + ',.' + cls.ALLDAY_CELLS_CLASS + ',.' + cls.HEADER_CELLS_CLASS;\n    var target = closest(e.target, queryStr);\n\n    if (isNullOrUndefined(target)) {\n      return;\n    }\n\n    if (!isNullOrUndefined(closest(e.target, '.' + cls.NEW_EVENT_CLASS))) {\n      this.parent.eventWindow.openEditor(this.parent.activeCellsData, 'Add');\n      return;\n    }\n\n    var navigateEle = closest(e.target, '.' + cls.NAVIGATE_CLASS);\n    var navigateView = this.parent.getNavigateView();\n    var sameView = this.parent.currentView === navigateView;\n\n    if (isNullOrUndefined(navigateEle) || sameView || isNullOrUndefined(this.parent.viewOptions[navigateView.charAt(0).toLowerCase() + navigateView.slice(1)])) {\n      if (this.parent.activeViewOptions.readonly) {\n        this.parent.quickPopup.quickPopupHide();\n        return;\n      }\n\n      if (this.parent.isAdaptive && (e.target.classList.contains(cls.MORE_INDICATOR_CLASS) || closest(e.target, '.' + cls.MORE_INDICATOR_CLASS))) {\n        return;\n      }\n\n      var isWorkCell_1 = target.classList.contains(cls.WORK_CELLS_CLASS) || target.classList.contains(cls.ALLDAY_CELLS_CLASS);\n\n      if (isWorkCell_1 && e.shiftKey && e.which === 1 && this.parent.keyboardInteractionModule) {\n        this.parent.keyboardInteractionModule.onMouseSelection(e);\n        return;\n      }\n\n      this.parent.activeCellsData = this.parent.getCellDetails(target);\n      var args = extend(this.parent.activeCellsData, {\n        cancel: false,\n        event: e,\n        name: 'cellClick'\n      });\n      this.parent.trigger(event.cellClick, args, function (clickArgs) {\n        clickArgs = _this.serializingData(clickArgs, e);\n\n        if (!clickArgs.cancel) {\n          if (isWorkCell_1) {\n            _this.parent.selectCell(target);\n          }\n\n          _this.parent.notify(event.cellClick, clickArgs);\n        }\n      });\n    } else {\n      var date = this.parent.getDateFromElement(target);\n\n      if (!isNullOrUndefined(date) && !this.parent.isAdaptive) {\n        this.parent.setProperties({\n          selectedDate: date\n        }, true);\n        this.parent.changeView(this.parent.getNavigateView(), e);\n      }\n    }\n  };\n\n  WorkCellInteraction.prototype.cellDblClick = function (e) {\n    var _this = this;\n\n    if (this.parent.activeViewOptions.readonly || this.isPreventAction(e)) {\n      return;\n    }\n\n    var args = extend(this.parent.activeCellsData, {\n      cancel: false,\n      event: e,\n      name: 'cellDoubleClick'\n    });\n    this.parent.trigger(event.cellDoubleClick, args, function (clickArgs) {\n      clickArgs = _this.serializingData(clickArgs, e);\n\n      if (!clickArgs.cancel) {\n        _this.parent.eventWindow.openEditor(_this.parent.activeCellsData, 'Add');\n      }\n    });\n  };\n\n  WorkCellInteraction.prototype.serializingData = function (clickArgs, e) {\n    if (isBlazor()) {\n      clickArgs.startTime = this.parent.getDateTime(clickArgs.startTime);\n      clickArgs.endTime = this.parent.getDateTime(clickArgs.endTime);\n\n      if (clickArgs.element) {\n        clickArgs.element = getElement(clickArgs.element);\n      }\n\n      if (clickArgs.event) {\n        clickArgs.event = e;\n      }\n    }\n\n    return clickArgs;\n  };\n\n  WorkCellInteraction.prototype.onHover = function (e) {\n    var targetSelector = '.' + cls.WORK_CELLS_CLASS + ',.' + cls.TIME_SLOT_CLASS + ',.' + cls.ALLDAY_CELLS_CLASS + ',.' + cls.HEADER_CELLS_CLASS + ',.' + cls.RESOURCE_CELLS_CLASS + ',.' + cls.APPOINTMENT_CLASS + ',.' + cls.WEEK_NUMBER_CLASS + ',.' + cls.MONTH_HEADER_CLASS;\n    var hoverTarget = closest(e.target, targetSelector);\n\n    if (hoverTarget) {\n      var hoverArgs = {\n        element: hoverTarget,\n        event: e\n      };\n      this.parent.trigger(event.hover, hoverArgs);\n    }\n  };\n\n  WorkCellInteraction.prototype.isPreventAction = function (e) {\n    if (closest(e.target, '.' + cls.NAVIGATE_CLASS)) {\n      return false;\n    }\n\n    if (closest(e.target, '.' + cls.APPOINTMENT_WRAPPER_CLASS) && !closest(e.target, '.' + cls.MORE_INDICATOR_CLASS)) {\n      return true;\n    }\n\n    var target = closest(e.target, '.' + cls.APPOINTMENT_CLASS + ',.' + cls.RESOURCE_GROUP_CELLS_CLASS);\n\n    if (!isNullOrUndefined(target)) {\n      return true;\n    }\n\n    target = closest(e.target, '.' + cls.HEADER_CELLS_CLASS);\n\n    if (this.parent.activeView.isTimelineView() && !isNullOrUndefined(target)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return WorkCellInteraction;\n}();\n\nexport { WorkCellInteraction };","map":null,"metadata":{},"sourceType":"module"}