{"ast":null,"code":"import { createElement, append, prepend, isNullOrUndefined, getValue, getDefaultDateObject, cldrData, addClass, setStyleAttribute, formatUnit } from '@syncfusion/ej2-base';\nimport { getDateInMs, addDays, resetTime, WEEK_LENGTH, getWeekFirstDate, getOuterHeight, getScrollBarWidth } from '../base/util';\nimport * as cls from '../base/css-constant';\n/**\n * view base\n */\n\nexport var ViewHelper;\n\n(function (ViewHelper) {\n  ViewHelper.getDayName = function (proxy, date) {\n    return proxy.getDayNames('abbreviated')[date.getDay()];\n  };\n\n  ViewHelper.getDate = function (proxy, date) {\n    return proxy.globalize.formatDate(date, {\n      format: 'd',\n      calendar: proxy.getCalendarMode()\n    });\n  };\n\n  ViewHelper.getTime = function (proxy, date) {\n    if (proxy.isAdaptive) {\n      if (proxy.timeFormat === 'HH:mm') {\n        return proxy.globalize.formatDate(date, {\n          format: 'H',\n          calendar: proxy.getCalendarMode()\n        });\n      }\n\n      return proxy.globalize.formatDate(date, {\n        skeleton: 'h',\n        calendar: proxy.getCalendarMode()\n      });\n    }\n\n    return proxy.getTimeString(date);\n  };\n\n  ViewHelper.getTimelineDate = function (proxy, date) {\n    return proxy.globalize.formatDate(date, {\n      skeleton: 'MMMd',\n      calendar: proxy.getCalendarMode()\n    }) + ', ' + proxy.getDayNames('wide')[date.getDay()];\n  };\n})(ViewHelper || (ViewHelper = {}));\n\nvar ViewBase =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   */\n  function ViewBase(parent) {\n    this.parent = parent;\n  }\n\n  ViewBase.prototype.isTimelineView = function () {\n    return this.parent.currentView.indexOf('Timeline') !== -1;\n  };\n\n  ViewBase.prototype.getContentRows = function () {\n    return [];\n  };\n\n  ViewBase.prototype.createEventTable = function (trCount) {\n    var eventTable = createElement('div', {\n      className: cls.EVENT_TABLE_CLASS\n    });\n    append(this.getEventRows(trCount), eventTable);\n    return eventTable;\n  };\n\n  ViewBase.prototype.getEventRows = function (trCount) {\n    var eventRows = [];\n    var eventContainer;\n\n    for (var row = 0; row < trCount; row++) {\n      eventContainer = createElement('div', {\n        className: cls.APPOINTMENT_CONTAINER_CLASS\n      });\n\n      if (this.parent.resourceBase && !this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.renderedResources) {\n        eventContainer.setAttribute('data-group-index', this.parent.resourceBase.renderedResources[row].groupIndex.toString());\n      }\n\n      eventRows.push(eventContainer);\n    }\n\n    return eventRows;\n  };\n\n  ViewBase.prototype.collapseRows = function (wrap) {\n    if (!this.isTimelineView()) {\n      return;\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      this.parent.resourceBase.hideResourceRows(wrap.querySelector('tbody'));\n      this.parent.resourceBase.hideResourceRows(wrap.querySelector('.' + cls.EVENT_TABLE_CLASS));\n    }\n  };\n\n  ViewBase.prototype.createTableLayout = function (className) {\n    var clsName = className || '';\n    var table = createElement('table', {\n      className: cls.SCHEDULE_TABLE_CLASS + ' ' + clsName\n    });\n    var tbody = createElement('tbody');\n    table.appendChild(tbody);\n    return table;\n  };\n\n  ViewBase.prototype.createColGroup = function (table, lastRow) {\n    var length = lastRow.length;\n\n    if (lastRow[0] && lastRow[0].colSpan) {\n      length = lastRow.map(function (value) {\n        return value.colSpan;\n      }).reduce(function (prev, next) {\n        return prev + next;\n      });\n    }\n\n    var colGroupEle = createElement('colgroup');\n\n    for (var i = 0; i < length; i++) {\n      colGroupEle.appendChild(createElement('col'));\n    }\n\n    prepend([colGroupEle], table);\n  };\n\n  ViewBase.prototype.getScrollXIndent = function (content) {\n    return content.offsetHeight - content.clientHeight > 0 ? getScrollBarWidth() : 0;\n  };\n\n  ViewBase.prototype.scrollTopPanel = function (target) {\n    this.getDatesHeaderElement().firstChild.scrollLeft = target.scrollLeft;\n  };\n\n  ViewBase.prototype.scrollHeaderLabels = function (target) {\n    var _this = this;\n\n    var headerTable = this.element.querySelector('.e-date-header-wrap table');\n    var colWidth = headerTable.offsetWidth / headerTable.querySelectorAll('colgroup col').length;\n\n    var applyLeft = function (headerCells, isRtl) {\n      var currentCell;\n      var tdLeft = 0;\n      var colSpan = 0;\n      var hiddenLeft = isRtl ? target.scrollWidth - target.offsetWidth - target.scrollLeft : target.scrollLeft;\n\n      for (var i = 0; i < headerCells.length; i++) {\n        colSpan += parseInt(headerCells[i].getAttribute('colSpan'), 10);\n\n        if (colSpan > Math.floor(hiddenLeft / colWidth)) {\n          currentCell = headerCells[i];\n          break;\n        }\n\n        tdLeft += headerCells[i].offsetWidth;\n      }\n\n      currentCell.children[0].style[isRtl ? 'right' : 'left'] = hiddenLeft - tdLeft + 'px';\n    };\n\n    var className = ['.e-header-year-cell', '.e-header-month-cell', '.e-header-week-cell', '.e-header-cells'];\n\n    for (var i = 0; i < className.length; i++) {\n      var headerCells = [].slice.call(this.element.querySelectorAll(className[i]));\n\n      if (headerCells.length > 0) {\n        headerCells.forEach(function (element) {\n          element.children[0].style[_this.parent.enableRtl ? 'right' : 'left'] = '';\n        });\n        applyLeft(headerCells, this.parent.enableRtl);\n      }\n    }\n  };\n\n  ViewBase.prototype.addAttributes = function (td, element) {\n    if (td.template) {\n      append(td.template, element);\n    }\n\n    if (td.colSpan) {\n      element.setAttribute('colspan', td.colSpan.toString());\n    }\n\n    if (td.className) {\n      addClass([element], td.className);\n    }\n  };\n\n  ViewBase.prototype.getHeaderBarHeight = function () {\n    var headerBarHeight = 2;\n\n    if (this.parent.headerModule) {\n      headerBarHeight += getOuterHeight(this.parent.headerModule.getHeaderElement());\n    }\n\n    if (this.parent.uiStateValues.isGroupAdaptive) {\n      var resHeader = this.parent.element.querySelector('.' + cls.RESOURCE_HEADER_TOOLBAR);\n\n      if (resHeader) {\n        headerBarHeight += resHeader.offsetHeight;\n      }\n    }\n\n    return headerBarHeight;\n  };\n\n  ViewBase.prototype.renderPanel = function (type) {\n    if (type === cls.PREVIOUS_PANEL_CLASS) {\n      prepend([this.element], this.parent.element.querySelector('.' + cls.TABLE_CONTAINER_CLASS));\n    } else {\n      this.parent.element.querySelector('.' + cls.TABLE_CONTAINER_CLASS).appendChild(this.element);\n    }\n  };\n\n  ViewBase.prototype.setPanel = function (panel) {\n    this.element = panel;\n  };\n\n  ViewBase.prototype.getPanel = function () {\n    return this.element;\n  };\n\n  ViewBase.prototype.getDatesHeaderElement = function () {\n    return this.element.querySelector('.' + cls.DATE_HEADER_CONTAINER_CLASS);\n  };\n\n  ViewBase.prototype.getDateSlots = function (renderDates, workDays) {\n    // Here getDateSlots only need in vertical and month views\n    return [];\n  };\n\n  ViewBase.prototype.generateColumnLevels = function () {\n    // Here generateColumnLevels only need in vertical and month views\n    return [];\n  };\n\n  ViewBase.prototype.getColumnLevels = function () {\n    return this.colLevels;\n  };\n\n  ViewBase.prototype.highlightCurrentTime = function () {// Here showTimeIndicator functionalities\n  };\n\n  ViewBase.prototype.startDate = function () {\n    return this.renderDates[0];\n  };\n\n  ViewBase.prototype.endDate = function () {\n    return addDays(this.renderDates[this.renderDates.length - 1], 1);\n  };\n\n  ViewBase.prototype.getStartHour = function () {\n    var startHour = this.parent.getStartEndTime(this.parent.activeViewOptions.startHour);\n\n    if (isNullOrUndefined(startHour)) {\n      startHour = new Date(2000, 0, 0, 0);\n    }\n\n    return startHour;\n  };\n\n  ViewBase.prototype.getEndHour = function () {\n    var endHour = this.parent.getStartEndTime(this.parent.activeViewOptions.endHour);\n\n    if (isNullOrUndefined(endHour)) {\n      endHour = new Date(2000, 0, 0, 0);\n    }\n\n    return endHour;\n  };\n\n  ViewBase.prototype.isCurrentDate = function (date) {\n    return date.setHours(0, 0, 0, 0) === this.parent.getCurrentTime().setHours(0, 0, 0, 0);\n  };\n\n  ViewBase.prototype.isCurrentMonth = function (date) {\n    return date.getFullYear() === this.parent.getCurrentTime().getFullYear() && date.getMonth() === this.parent.getCurrentTime().getMonth();\n  };\n\n  ViewBase.prototype.isWorkDay = function (date, workDays) {\n    if (workDays === void 0) {\n      workDays = this.parent.activeViewOptions.workDays;\n    }\n\n    if (workDays.indexOf(date.getDay()) >= 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  ViewBase.prototype.isWorkHour = function (date, startHour, endHour, workDays) {\n    if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour)) {\n      return false;\n    }\n\n    startHour.setMilliseconds(0);\n    endHour.setMilliseconds(0);\n\n    if (getDateInMs(date) < getDateInMs(startHour) || getDateInMs(date) >= getDateInMs(endHour) || !this.isWorkDay(date, workDays)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  ViewBase.prototype.getRenderDates = function (workDays) {\n    var renderDates = []; // Due to same code for vertical and time line, week & work week views, if condition has used\n\n    if (this.parent.currentView === 'Week' || this.parent.currentView === 'TimelineWeek') {\n      var selectedDate = resetTime(this.parent.selectedDate);\n      var start = getWeekFirstDate(selectedDate, this.parent.activeViewOptions.firstDayOfWeek);\n\n      for (var i = 0, length_1 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_1; i++) {\n        if (this.parent.activeViewOptions.showWeekend) {\n          renderDates.push(start);\n        } else {\n          if (this.isWorkDay(start, workDays)) {\n            renderDates.push(start);\n          }\n        }\n\n        start = addDays(start, 1);\n      }\n    } else if (this.parent.currentView === 'WorkWeek' || this.parent.currentView === 'TimelineWorkWeek') {\n      var start = getWeekFirstDate(resetTime(this.parent.selectedDate), this.parent.activeViewOptions.firstDayOfWeek);\n\n      for (var i = 0, length_2 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_2; i++) {\n        if (this.isWorkDay(start, workDays)) {\n          renderDates.push(start);\n        }\n\n        start = addDays(start, 1);\n      }\n    } else {\n      var start = resetTime(this.parent.selectedDate);\n\n      do {\n        if (this.parent.activeViewOptions.showWeekend) {\n          renderDates.push(start);\n        } else {\n          if (this.isWorkDay(start, workDays)) {\n            renderDates.push(start);\n          }\n        }\n\n        start = addDays(start, 1);\n      } while (this.parent.activeViewOptions.interval !== renderDates.length);\n    }\n\n    if (!workDays) {\n      this.renderDates = renderDates;\n    }\n\n    return renderDates;\n  };\n\n  ViewBase.prototype.getNextPreviousDate = function (type) {\n    if (this.parent.currentView === 'Day' || this.parent.currentView === 'TimelineDay') {\n      if (this.parent.activeViewOptions.showWeekend) {\n        var daysCount = this.parent.activeViewOptions.interval;\n        return addDays(this.parent.selectedDate, type === 'next' ? daysCount : -daysCount);\n      } else {\n        var date = void 0;\n\n        if (type === 'next') {\n          date = addDays(this.renderDates.slice(-1)[0], 1);\n\n          while (!this.isWorkDay(date)) {\n            date = addDays(date, 1);\n          }\n        } else {\n          date = addDays(this.renderDates[0], -1);\n          var count = 0;\n\n          do {\n            if (this.isWorkDay(date)) {\n              count += 1;\n            }\n\n            if (this.parent.activeViewOptions.interval !== count) {\n              date = addDays(date, -1);\n            }\n          } while (this.parent.activeViewOptions.interval !== count);\n        }\n\n        return date;\n      }\n    }\n\n    if (type === 'next') {\n      return addDays(this.parent.selectedDate, WEEK_LENGTH * this.parent.activeViewOptions.interval);\n    } else {\n      return addDays(this.parent.selectedDate, -WEEK_LENGTH * this.parent.activeViewOptions.interval);\n    }\n  };\n\n  ViewBase.prototype.getLabelText = function (view) {\n    return this.parent.localeObj.getConstant(view) + ' of ' + this.parent.globalize.formatDate(this.parent.selectedDate, {\n      skeleton: 'long',\n      calendar: this.parent.getCalendarMode()\n    });\n  };\n\n  ViewBase.prototype.getDateRangeText = function () {\n    if (this.parent.isAdaptive) {\n      return this.parent.globalize.formatDate(this.parent.selectedDate, {\n        format: 'MMMM y',\n        calendar: this.parent.getCalendarMode()\n      });\n    }\n\n    return this.formatDateRange(this.renderDates[0], this.renderDates[this.renderDates.length - 1]);\n  };\n\n  ViewBase.prototype.formatDateRange = function (startDate, endDate) {\n    var globalize = this.parent.globalize;\n\n    if (startDate === endDate) {\n      endDate = null;\n    }\n\n    if (!isNullOrUndefined(this.parent.activeViewOptions.dateFormat)) {\n      if (!endDate) {\n        return globalize.formatDate(startDate, {\n          format: this.parent.activeViewOptions.dateFormat,\n          calendar: this.parent.getCalendarMode()\n        });\n      }\n\n      return globalize.formatDate(startDate, {\n        format: this.parent.activeViewOptions.dateFormat,\n        calendar: this.parent.getCalendarMode()\n      }) + ' - ' + globalize.formatDate(endDate, {\n        format: this.parent.activeViewOptions.dateFormat,\n        calendar: this.parent.getCalendarMode()\n      });\n    }\n\n    var formattedStr;\n    var longDateFormat;\n\n    if (this.parent.locale === 'en' || this.parent.locale === 'en-US') {\n      longDateFormat = getValue('dateFormats.long', getDefaultDateObject(this.parent.getCalendarMode()));\n    } else {\n      longDateFormat = getValue('main.' + '' + this.parent.locale + '.dates.calendars.' + this.parent.getCalendarMode() + '.dateFormats.long', cldrData);\n    }\n\n    if (!endDate) {\n      return globalize.formatDate(startDate, {\n        format: longDateFormat,\n        calendar: this.parent.getCalendarMode()\n      });\n    }\n\n    var dateFormat = longDateFormat.trim().toLocaleLowerCase();\n\n    if (dateFormat.substr(0, 1) === 'd') {\n      if (startDate.getFullYear() === endDate.getFullYear()) {\n        if (startDate.getMonth() === endDate.getMonth()) {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'dd',\n            calendar: this.parent.getCalendarMode()\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'dd MMMM yyyy',\n            calendar: this.parent.getCalendarMode()\n          });\n        } else {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'dd MMM',\n            calendar: this.parent.getCalendarMode()\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'dd MMM yyyy',\n            calendar: this.parent.getCalendarMode()\n          });\n        }\n      } else {\n        formattedStr = globalize.formatDate(startDate, {\n          format: 'dd MMM yyyy',\n          calendar: this.parent.getCalendarMode()\n        }) + ' - ' + globalize.formatDate(endDate, {\n          format: 'dd MMM yyyy',\n          calendar: this.parent.getCalendarMode()\n        });\n      }\n    } else if (dateFormat.substr(0, 1) === 'm') {\n      if (startDate.getFullYear() === endDate.getFullYear()) {\n        if (startDate.getMonth() === endDate.getMonth()) {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'MMMM dd',\n            calendar: this.parent.getCalendarMode()\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'dd, yyyy',\n            calendar: this.parent.getCalendarMode()\n          });\n        } else {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'MMM dd',\n            calendar: this.parent.getCalendarMode()\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'MMM dd, yyyy',\n            calendar: this.parent.getCalendarMode()\n          });\n        }\n      } else {\n        formattedStr = globalize.formatDate(startDate, {\n          format: 'MMM dd, yyyy',\n          calendar: this.parent.getCalendarMode()\n        }) + ' - ' + globalize.formatDate(endDate, {\n          format: 'MMM dd, yyyy',\n          calendar: this.parent.getCalendarMode()\n        });\n      }\n    } else {\n      formattedStr = globalize.formatDate(startDate, {\n        format: longDateFormat,\n        calendar: this.parent.getCalendarMode()\n      }) + ' - ' + globalize.formatDate(endDate, {\n        format: longDateFormat,\n        calendar: this.parent.getCalendarMode()\n      });\n    }\n\n    return formattedStr;\n  };\n\n  ViewBase.prototype.getMobileDateElement = function (date, className) {\n    var wrap = createElement('div', {\n      className: className,\n      innerHTML: '<div class=\"e-m-date\">' + this.parent.globalize.formatDate(date, {\n        format: 'd',\n        calendar: this.parent.getCalendarMode()\n      }) + '</div>' + '<div class=\"e-m-day\">' + this.parent.globalize.formatDate(date, {\n        format: 'E',\n        calendar: this.parent.getCalendarMode()\n      }) + '</div>'\n    });\n    return wrap;\n  };\n\n  ViewBase.prototype.setResourceHeaderContent = function (tdElement, tdData, className) {\n    if (className === void 0) {\n      className = 'e-text-ellipsis';\n    }\n\n    if (this.parent.activeViewOptions.resourceHeaderTemplate) {\n      var data = {\n        resource: tdData.resource,\n        resourceData: tdData.resourceData\n      };\n      var scheduleId = this.parent.element.id + '_';\n      var viewName = this.parent.activeViewOptions.resourceHeaderTemplateName;\n      var templateId = scheduleId + viewName + 'resourceHeaderTemplate';\n      var quickTemplate = this.parent.getResourceHeaderTemplate()(data, this.parent, 'resourceHeaderTemplate', templateId, false);\n      append(quickTemplate, tdElement);\n    } else {\n      tdElement.appendChild(createElement('div', {\n        className: className,\n        innerHTML: tdData.resourceData[tdData.resource.textField]\n      }));\n    }\n  };\n\n  ViewBase.prototype.renderResourceMobileLayout = function () {\n    if (this.parent.resourceBase.lastResourceLevel && this.parent.resourceBase.lastResourceLevel.length <= 0) {\n      return;\n    }\n\n    this.parent.resourceBase.renderResourceHeader();\n    this.parent.resourceBase.renderResourceTree();\n  };\n\n  ViewBase.prototype.addAutoHeightClass = function (element) {\n    if (!this.parent.uiStateValues.isGroupAdaptive && this.parent.rowAutoHeight && this.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {\n      addClass([element], cls.AUTO_HEIGHT);\n    }\n  };\n\n  ViewBase.prototype.getColElements = function () {\n    return [].slice.call(this.parent.element.querySelectorAll('.' + cls.CONTENT_WRAP_CLASS + ' col, .' + cls.DATE_HEADER_WRAP_CLASS + ' col'));\n  };\n\n  ViewBase.prototype.setColWidth = function (content) {\n    if (this.isTimelineView()) {\n      var colElements = this.getColElements();\n      var colWidth_1 = Math.ceil(this.parent.getContentTable().offsetWidth / (colElements.length / 2));\n      colElements.forEach(function (col) {\n        return setStyleAttribute(col, {\n          'width': formatUnit(colWidth_1)\n        });\n      });\n\n      if (content.offsetHeight !== content.clientHeight) {\n        var resourceColumn = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);\n\n        if (!isNullOrUndefined(resourceColumn)) {\n          setStyleAttribute(resourceColumn, {\n            'height': formatUnit(content.clientHeight)\n          });\n        }\n      }\n    }\n  };\n\n  ViewBase.prototype.resetColWidth = function () {\n    var colElements = this.getColElements();\n    colElements.forEach(function (col) {\n      return col.style.width = '';\n    });\n  };\n\n  ViewBase.prototype.getContentAreaElement = function () {\n    return this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n  };\n\n  return ViewBase;\n}();\n\nexport { ViewBase };","map":null,"metadata":{},"sourceType":"module"}