{"ast":null,"code":"import { Workbook } from '@syncfusion/ej2-excel-export';\nimport { extend } from '@syncfusion/ej2-base';\n/**\n * Excel Export Module\n */\n\nvar ExcelExport =\n/** @class */\nfunction () {\n  function ExcelExport(parent) {\n    this.parent = parent;\n  }\n\n  ExcelExport.prototype.initializeExcelExport = function (excelExportOptions) {\n    var _this = this;\n\n    var exportFields = excelExportOptions.fields || Object.keys(this.parent.eventFields).map(function (field) {\n      return _this.parent.eventFields[field];\n    });\n    var exportName = excelExportOptions.fileName || 'Schedule';\n    var exportType = excelExportOptions.exportType || 'xlsx';\n    var isIncludeOccurrences = excelExportOptions.includeOccurrences || false;\n    var eventCollection;\n\n    if (excelExportOptions.customData) {\n      eventCollection = !isIncludeOccurrences ? excelExportOptions.customData : this.parent.eventBase.getProcessedEvents(excelExportOptions.customData);\n    } else {\n      eventCollection = !isIncludeOccurrences ? this.parent.eventsData : this.parent.eventsProcessed;\n    }\n\n    this.processWorkbook(exportFields, exportName, exportType, eventCollection);\n  };\n\n  ExcelExport.prototype.processWorkbook = function (fields, name, type, eventCollection) {\n    var _this = this;\n\n    var columns = [];\n    var rows = [];\n    var columnHeader = [];\n    fields.forEach(function (field, i) {\n      return columns.push({\n        index: i + 1,\n        width: field === 'Id' ? 20 : 150\n      });\n    });\n    var style = {\n      fontSize: 12,\n      borders: {\n        color: '#E0E0E0'\n      },\n      bold: true\n    };\n    fields.forEach(function (field, i) {\n      return columnHeader.push({\n        index: i + 1,\n        value: field,\n        style: style\n      });\n    });\n    rows.push({\n      index: 1,\n      cells: columnHeader\n    });\n    var i = 2;\n\n    var _loop_1 = function (event_1) {\n      var columnData = [];\n      fields.forEach(function (field, n) {\n        var columnRule = {\n          index: n + 1,\n          value: event_1[field] || ''\n        };\n\n        if (field === _this.parent.eventFields.startTime || field === _this.parent.eventFields.endTime) {\n          var styleRule = {\n            fontSize: 12,\n            numberFormat: 'm/d/yyyy h:mm AM/PM'\n          };\n          columnRule = extend({}, columnRule, {\n            style: styleRule\n          }, true);\n        }\n\n        columnData.push(columnRule);\n      });\n      rows.push({\n        index: i,\n        cells: columnData\n      });\n      i++;\n    };\n\n    for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {\n      var event_1 = eventCollection_1[_i];\n\n      _loop_1(event_1);\n    }\n\n    var workSheet = [{\n      columns: columns,\n      rows: rows\n    }];\n    var book = new Workbook({\n      worksheets: workSheet\n    }, type, this.parent.locale);\n    book.save(name + '.' + type);\n  };\n\n  ExcelExport.prototype.getModuleName = function () {\n    return 'excelExport';\n  };\n\n  ExcelExport.prototype.destroy = function () {\n    this.parent = null;\n  };\n\n  return ExcelExport;\n}();\n\nexport { ExcelExport };","map":null,"metadata":{},"sourceType":"module"}