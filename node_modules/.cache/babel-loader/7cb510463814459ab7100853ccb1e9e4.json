{"ast":null,"code":"import { extend } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { getDateFromRecurrenceDateString, getRecurrenceStringFromDate } from '../../recurrence-editor/date-generator';\n/**\n * ICalendar Export Module\n */\n\nvar ICalendarExport =\n/** @class */\nfunction () {\n  function ICalendarExport(parent) {\n    this.parent = parent;\n  }\n\n  ICalendarExport.prototype.initializeCalendarExport = function (fileName) {\n    var _this = this;\n\n    var eventsData = extend([], this.parent.eventsData, null, true);\n    eventsData = this.parent.eventBase.sortByTime(eventsData);\n    var SEPARATOR = navigator.appVersion.indexOf('Win') !== -1 ? '\\r\\n' : '\\n';\n    var iCalendarEvents = [];\n    var filterCollection = [];\n    var timeZone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();\n    var fields = this.parent.eventFields;\n    eventsData.forEach(function (eventObj) {\n      var uId = _this.parent.eventBase.generateGuid();\n\n      var editedExDate = [];\n\n      if (eventObj[fields.recurrenceID]) {\n        var filter = _this.filterEvents(filterCollection, fields.id, eventObj[fields.recurrenceID]);\n\n        uId = filter[0].UID;\n      }\n\n      if (!eventObj[fields.recurrenceID] && eventObj[fields.recurrenceRule] && eventObj[fields.recurrenceException]) {\n        var exceptionDateList = void 0;\n        var exDate = eventObj[fields.recurrenceException].split(',');\n\n        var editedObj = _this.filterEvents(eventsData, fields.recurrenceID, eventObj[fields.id]);\n\n        editedObj.forEach(function (edited) {\n          editedExDate.push(getRecurrenceStringFromDate(edited[fields.startTime]));\n        });\n        exceptionDateList = exDate.filter(function (value) {\n          return editedExDate.indexOf(value) === -1;\n        });\n        eventObj[fields.recurrenceException] = exceptionDateList.length > 0 ? exceptionDateList.join(',') + ',' : '';\n      }\n\n      var startZone = eventObj[fields.startTimezone] || timeZone;\n      var endZone = eventObj[fields.endTimezone] || timeZone;\n      var calendarEvent = ['BEGIN:VEVENT', 'LOCATION:' + (eventObj[fields.location] || ''), 'SUMMARY:' + (eventObj[fields.subject] || ''), 'UID:' + uId, 'DESCRIPTION:' + (eventObj[fields.description] || ''), 'END:VEVENT'];\n\n      if (eventObj[fields.isAllDay]) {\n        calendarEvent.splice(4, 0, 'DTEND;VALUE=DATE:' + _this.convertDateToString(eventObj[fields.endTime], true));\n        calendarEvent.splice(4, 0, 'DTSTART;VALUE=DATE:' + _this.convertDateToString(eventObj[fields.startTime], true));\n      } else if (!eventObj[fields.isAllDay] && !eventObj[fields.recurrenceRule]) {\n        calendarEvent.splice(4, 0, 'DTEND:' + _this.convertDateToString(eventObj[fields.endTime]));\n        calendarEvent.splice(4, 0, 'DTSTART:' + _this.convertDateToString(eventObj[fields.startTime]));\n      } else {\n        calendarEvent.splice(4, 0, 'DTEND;TZID=\"' + endZone + '\":' + _this.convertDateToString(eventObj[fields.endTime]));\n        calendarEvent.splice(4, 0, 'DTSTART;TZID=\"' + startZone + '\":' + _this.convertDateToString(eventObj[fields.startTime]));\n      }\n\n      if (eventObj[fields.recurrenceRule]) {\n        calendarEvent.splice(4, 0, 'RRULE:' + eventObj[fields.recurrenceRule]);\n      }\n\n      if (eventObj[fields.recurrenceException]) {\n        var exDate = eventObj[fields.recurrenceException].split(',');\n\n        for (var i = 0; i < exDate.length - 1; i++) {\n          calendarEvent.splice(5, 0, 'EXDATE:' + _this.convertDateToString(getDateFromRecurrenceDateString(exDate[i]), eventObj[fields.isAllDay]));\n        }\n      }\n\n      if (eventObj[fields.recurrenceID]) {\n        calendarEvent.splice(4, 0, 'RECURRENCE-ID;TZID=\"' + startZone + '\":' + _this.convertDateToString(eventObj[fields.startTime], eventObj[fields.isAllDay]));\n      }\n\n      var customFields = _this.customFieldFilter(eventObj, fields);\n\n      if (customFields.length > 0) {\n        customFields.forEach(function (customField) {\n          return calendarEvent.splice(4, 0, customField + ':' + (eventObj[customField] || ''));\n        });\n      }\n\n      var app = extend({}, eventObj);\n      app.UID = uId;\n      filterCollection.push(app);\n      iCalendarEvents.push(calendarEvent.join(SEPARATOR));\n    });\n    var iCalendar = ['BEGIN:VCALENDAR', 'PRODID:-//Syncfusion Inc//Scheduler//EN', 'VERSION:2.0', 'CALSCALE:GREGORIAN', 'METHOD:PUBLISH', 'X-WR-CALNAME:' + (fileName || 'Calendar'), 'X-WR-TIMEZONE:' + timeZone].join(SEPARATOR);\n    var icsString = iCalendar + SEPARATOR + iCalendarEvents.join(SEPARATOR) + SEPARATOR + 'END:VCALENDAR';\n    this.download(icsString, fileName);\n  };\n\n  ICalendarExport.prototype.customFieldFilter = function (eventObj, fields) {\n    var defaultFields = Object.keys(fields).map(function (key) {\n      return fields[key];\n    });\n    var eventFields = Object.keys(eventObj);\n    return eventFields.filter(function (value) {\n      return defaultFields.indexOf(value) === -1 && value !== 'Guid';\n    });\n  };\n\n  ICalendarExport.prototype.convertDateToString = function (eventDate, allDay) {\n    var year = ('0000' + eventDate.getFullYear().toString()).slice(-4);\n    var month = ('00' + (eventDate.getMonth() + 1).toString()).slice(-2);\n    var date = ('00' + eventDate.getDate().toString()).slice(-2);\n    var hours = ('00' + eventDate.getHours().toString()).slice(-2);\n    var minutes = ('00' + eventDate.getMinutes().toString()).slice(-2);\n    var seconds = ('00' + eventDate.getSeconds().toString()).slice(-2);\n    var timeString = allDay ? year + month + date : year + month + date + 'T' + hours + minutes + seconds;\n    return timeString;\n  };\n\n  ICalendarExport.prototype.download = function (icsString, fileName) {\n    var buffer = new Blob([icsString], {\n      type: 'data:text/calendar;charset=utf8'\n    });\n    fileName = (fileName || 'Calendar') + '.ics';\n\n    if (!!navigator.msSaveBlob) {\n      navigator.msSaveBlob(buffer, fileName);\n    } else {\n      var downloadLink_1 = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n      downloadLink_1.download = fileName;\n      downloadLink_1.href = URL.createObjectURL(buffer);\n      var event_1 = document.createEvent('MouseEvent');\n      event_1.initEvent('click', true, true);\n      downloadLink_1.dispatchEvent(event_1);\n      setTimeout(function () {\n        URL.revokeObjectURL(downloadLink_1.href);\n        downloadLink_1.href = undefined;\n      });\n    }\n  };\n\n  ICalendarExport.prototype.filterEvents = function (data, field, value) {\n    var queryManager = new Query().where(field, 'equal', value);\n    return new DataManager({\n      json: data\n    }).executeLocal(queryManager);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  ICalendarExport.prototype.getModuleName = function () {\n    return 'iCalendarExport';\n  };\n  /**\n   * To destroy the ICalendarExport.\n   * @return {void}\n   * @private\n   */\n\n\n  ICalendarExport.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent = null;\n  };\n\n  return ICalendarExport;\n}();\n\nexport { ICalendarExport };","map":null,"metadata":{},"sourceType":"module"}