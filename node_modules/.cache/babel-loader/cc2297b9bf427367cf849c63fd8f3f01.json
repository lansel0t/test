{"ast":null,"code":"import { createElement, isNullOrUndefined, addClass, remove, EventHandler, extend, append } from '@syncfusion/ej2-base';\nimport { cldrData, removeClass, getValue, getDefaultDateObject, closest, getElement } from '@syncfusion/ej2-base';\nimport { updateBlazorTemplate, resetBlazorTemplate, isBlazor } from '@syncfusion/ej2-base';\nimport { DataManager, Query, Deferred } from '@syncfusion/ej2-data';\nimport { CheckBox, Button } from '@syncfusion/ej2-buttons';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { DropDownList, MultiSelect } from '@syncfusion/ej2-dropdowns';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { DateTimePicker } from '@syncfusion/ej2-calendars';\nimport { timezoneData } from '../timezone/timezone';\nimport { FieldValidator } from './form-validator';\nimport { RecurrenceEditor } from '../../recurrence-editor/recurrence-editor';\nimport * as cls from '../base/css-constant';\nimport * as event from '../base/constant';\nimport * as util from '../base/util';\nvar EVENT_FIELD = 'e-field';\nvar REPEAT_CONTAINER_CLASS = 'e-recurrence-container';\nvar REPEAT_BUTTON_ICON_CLASS = 'e-recurrence-edit';\nvar REPEAT_BUTTON_CLASS = 'e-recurrence-edit-button';\nvar REPEAT_DIALOG_CLASS = 'e-recurrence-dialog';\nvar HIDE_STYLE_CLASS = 'e-hide';\n/**\n * Event editor window\n */\n\nvar EventWindow =\n/** @class */\nfunction () {\n  /**\n   * Constructor for event window\n   */\n  function EventWindow(parent) {\n    this.parent = parent;\n    this.l10n = this.parent.localeObj;\n    this.fields = this.parent.eventFields;\n    this.eventWindowTime = {\n      startTime: new Date(),\n      endTime: new Date()\n    };\n    this.fieldValidator = new FieldValidator();\n    this.renderEventWindow();\n  }\n\n  EventWindow.prototype.renderEventWindow = function () {\n    this.element = createElement('div', {\n      id: this.parent.element.id + '_dialog_wrapper'\n    });\n    this.parent.element.appendChild(this.element);\n    var dialogModel = {\n      animationSettings: {\n        effect: 'Zoom'\n      },\n      content: this.getEventWindowContent(),\n      cssClass: cls.EVENT_WINDOW_DIALOG_CLASS,\n      enableRtl: this.parent.enableRtl,\n      height: this.parent.isAdaptive ? '100%' : 'auto',\n      isModal: true,\n      showCloseIcon: this.parent.isAdaptive ? false : true,\n      target: document.body,\n      visible: false,\n      width: '500px',\n      beforeOpen: this.onBeforeOpen.bind(this),\n      beforeClose: this.onBeforeClose.bind(this)\n    };\n\n    if (this.parent.isAdaptive) {\n      dialogModel.cssClass = cls.EVENT_WINDOW_DIALOG_CLASS + ' ' + cls.DEVICE_CLASS;\n      dialogModel.header = '<div class=\"e-title-header\"><div class=\"e-back-icon e-icons\"></div><div class=\"e-title-text\">' + this.l10n.getConstant('newEvent') + '</div><div class=\"e-save-icon e-icons\"></div></div>';\n    } else {\n      dialogModel.buttons = [{\n        buttonModel: {\n          content: this.l10n.getConstant('deleteButton'),\n          cssClass: cls.DELETE_EVENT_CLASS,\n          disabled: !this.parent.eventSettings.allowDeleting || this.parent.readonly\n        },\n        click: this.eventDelete.bind(this)\n      }, {\n        buttonModel: {\n          content: this.l10n.getConstant('saveButton'),\n          cssClass: 'e-primary ' + cls.EVENT_WINDOW_SAVE_BUTTON_CLASS,\n          isPrimary: true,\n          disabled: !this.parent.eventSettings.allowAdding || this.parent.readonly\n        },\n        click: this.eventSave.bind(this)\n      }, {\n        buttonModel: {\n          cssClass: cls.EVENT_WINDOW_CANCEL_BUTTON_CLASS,\n          content: this.l10n.getConstant('cancelButton')\n        },\n        click: this.dialogClose.bind(this)\n      }];\n      dialogModel.header = '<div class=\"e-title-text\">' + this.l10n.getConstant('newEvent') + '</div>';\n    }\n\n    this.dialogObject = new Dialog(dialogModel, this.element);\n    this.dialogObject.isStringTemplate = true;\n    this.updateEditorTemplate();\n    addClass([this.element.parentElement], cls.EVENT_WINDOW_DIALOG_CLASS + '-container');\n\n    if (this.parent.isAdaptive) {\n      EventHandler.add(this.element.querySelector('.' + cls.EVENT_WINDOW_BACK_ICON_CLASS), 'click', this.dialogClose, this);\n      EventHandler.add(this.element.querySelector('.' + cls.EVENT_WINDOW_SAVE_ICON_CLASS), 'click', this.eventSave, this);\n    }\n\n    this.applyFormValidation();\n  };\n\n  EventWindow.prototype.updateEditorTemplate = function () {\n    if (this.parent.editorTemplate) {\n      updateBlazorTemplate(this.parent.element.id + '_editorTemplate', 'EditorTemplate', this.parent);\n    }\n  };\n\n  EventWindow.prototype.resetEditorTemplate = function () {\n    if (this.parent.editorTemplate) {\n      resetBlazorTemplate(this.parent.element.id + '_editorTemplate', 'EditorTemplate');\n    }\n  };\n\n  EventWindow.prototype.refresh = function () {\n    this.destroy();\n    this.renderEventWindow();\n  };\n\n  EventWindow.prototype.refreshRecurrenceEditor = function () {\n    if (this.recurrenceEditor) {\n      var recurrenceEditor = this.recurrenceEditor.element;\n      this.recurrenceEditor.destroy();\n      this.createRecurrenceEditor(recurrenceEditor);\n    }\n  };\n\n  EventWindow.prototype.setRecurrenceEditor = function (recurrenceEditor) {\n    if (this.parent.editorTemplate) {\n      this.recurrenceEditor = recurrenceEditor;\n    }\n  };\n\n  EventWindow.prototype.openEditor = function (data, type, isEventData, repeatType) {\n    this.parent.currentAction = type;\n    this.parent.removeNewEventElement();\n    this.parent.quickPopup.quickPopupHide(true);\n\n    if (type === 'Add') {\n      var eventObj = {};\n      this.cellClickAction = !isEventData;\n      this.parent.activeCellsData = data;\n      var event_1 = data;\n\n      if (this.cellClickAction) {\n        this.convertToEventData(event_1, eventObj);\n      } else {\n        this.parent.activeCellsData = {\n          startTime: event_1.startTime || event_1[this.fields.startTime],\n          endTime: event_1.endTime || event_1[this.fields.endTime],\n          isAllDay: event_1.isAllDay || event_1[this.fields.isAllDay],\n          element: event_1.element,\n          groupIndex: event_1.groupIndex\n        };\n        eventObj = event_1;\n      }\n\n      data = eventObj;\n    }\n\n    if (!isNullOrUndefined(this.parent.editorTemplate)) {\n      this.renderFormElements(this.element.querySelector('.e-schedule-form'), data);\n      this.updateEditorTemplate();\n    }\n\n    if (!this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {\n      removeClass([this.dialogObject.element.querySelector('.e-recurrenceeditor')], cls.DISABLE_CLASS);\n    }\n\n    if (this.recurrenceEditor) {\n      this.recurrenceEditor.firstDayOfWeek = this.parent.activeViewOptions.firstDayOfWeek;\n    }\n\n    switch (type) {\n      case 'Add':\n        this.onCellDetailsUpdate(data, repeatType);\n        break;\n\n      case 'Save':\n      case 'EditOccurrence':\n      case 'EditSeries':\n      case 'EditFollowingEvents':\n        if (type === 'EditOccurrence' && !this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {\n          addClass([this.dialogObject.element.querySelector('.e-recurrenceeditor')], cls.DISABLE_CLASS);\n        }\n\n        this.cellClickAction = false;\n        this.onEventDetailsUpdate(data);\n        break;\n    }\n  };\n\n  EventWindow.prototype.setDialogContent = function () {\n    this.resetEditorTemplate();\n    this.dialogObject.content = this.getEventWindowContent();\n    this.dialogObject.dataBind();\n    this.updateEditorTemplate();\n  };\n\n  EventWindow.prototype.onBeforeOpen = function (args) {\n    var _this = this;\n\n    var eventProp = {\n      type: 'Editor',\n      data: this.eventData,\n      cancel: false,\n      element: this.element,\n      target: this.cellClickAction ? this.parent.activeCellsData.element : this.parent.activeEventData.element\n    };\n\n    if (this.cellClickAction) {\n      eventProp.duration = this.getSlotDuration();\n    }\n\n    var saveObj = this.getInstance(cls.EVENT_WINDOW_SAVE_BUTTON_CLASS);\n\n    if (saveObj) {\n      saveObj.disabled = !(this.cellClickAction ? this.parent.eventSettings.allowAdding : this.parent.eventSettings.allowEditing);\n      saveObj.dataBind();\n    }\n\n    var deleteObj = this.getInstance(cls.DELETE_EVENT_CLASS);\n\n    if (deleteObj) {\n      deleteObj.disabled = !this.parent.eventSettings.allowDeleting;\n      deleteObj.dataBind();\n    }\n\n    var callBackPromise = new Deferred();\n    this.parent.trigger(event.popupOpen, eventProp, function (popupArgs) {\n      args.cancel = popupArgs.cancel;\n      _this.duration = _this.cellClickAction ? popupArgs.duration : null;\n\n      _this.refreshDateTimePicker(_this.duration);\n\n      if (_this.cellClickAction && popupArgs.duration !== _this.getSlotDuration() && isNullOrUndefined(_this.parent.editorTemplate)) {\n        var startObj = _this.getInstance(cls.EVENT_WINDOW_START_CLASS);\n\n        var endObj = _this.getInstance(cls.EVENT_WINDOW_END_CLASS);\n\n        endObj.value = new Date(startObj.value.getTime() + util.MS_PER_MINUTE * popupArgs.duration);\n        endObj.dataBind();\n      }\n\n      if (_this.parent.editorTemplate && _this.element.querySelector('.e-recurrenceeditor') && !_this.recurrenceEditor) {\n        _this.recurrenceEditor = _this.getInstance('e-recurrenceeditor');\n      }\n\n      callBackPromise.resolve(args);\n    });\n    return callBackPromise;\n  };\n\n  EventWindow.prototype.onBeforeClose = function (args) {\n    var _this = this;\n\n    if (args.isInteracted) {\n      this.isCrudAction = false;\n    }\n\n    var eventProp = {\n      type: 'Editor',\n      data: this.eventCrudData,\n      cancel: false,\n      element: this.element,\n      target: this.cellClickAction ? this.parent.activeCellsData.element : this.parent.activeEventData.element\n    };\n    var callBackPromise = new Deferred();\n    this.parent.trigger(event.popupClose, eventProp, function (popupArgs) {\n      if (isBlazor()) {\n        var eventFields = _this.parent.eventFields;\n\n        if (popupArgs.data) {\n          var eventObj = popupArgs.data;\n          eventObj[eventFields.startTime] = _this.parent.getDateTime(eventObj[eventFields.startTime]);\n          eventObj[eventFields.endTime] = _this.parent.getDateTime(eventObj[eventFields.endTime]);\n        }\n\n        if (popupArgs.element) {\n          popupArgs.element = getElement(popupArgs.element);\n        }\n\n        if (popupArgs.target) {\n          popupArgs.target = getElement(popupArgs.target);\n        }\n      }\n\n      args.cancel = popupArgs.cancel;\n\n      if (!popupArgs.cancel) {\n        if (_this.isCrudAction) {\n          args.cancel = _this.processCrudActions(popupArgs.data);\n          _this.isCrudAction = args.cancel;\n        }\n\n        if (!_this.isCrudAction) {\n          _this.resetForm();\n\n          _this.parent.eventBase.focusElement();\n\n          _this.eventCrudData = null;\n        }\n      }\n\n      callBackPromise.resolve(args);\n    });\n    return callBackPromise;\n  };\n\n  EventWindow.prototype.getEventWindowContent = function () {\n    var container = createElement('div', {\n      className: cls.FORM_CONTAINER_CLASS\n    });\n    var form = createElement('form', {\n      id: this.parent.element.id + 'EditForm',\n      className: cls.FORM_CLASS,\n      attrs: {\n        onsubmit: 'return false;'\n      }\n    });\n    this.renderFormElements(form);\n    container.appendChild(form);\n    return container;\n  };\n\n  EventWindow.prototype.renderFormElements = function (form, args) {\n    if (!isNullOrUndefined(this.parent.editorTemplate)) {\n      if (args) {\n        this.resetEditorTemplate();\n\n        if (this.recurrenceEditor) {\n          this.recurrenceEditor.destroy();\n          this.recurrenceEditor = null;\n        }\n\n        this.destroyComponents();\n        [].slice.call(form.childNodes).forEach(function (node) {\n          return remove(node);\n        });\n      }\n\n      var templateId = this.parent.element.id + '_editorTemplate';\n      var editorTemplate = this.parent.getEditorTemplate()(args || {}, this.parent, 'editorTemplate', templateId, false);\n      append(editorTemplate, form);\n    } else {\n      form.appendChild(this.getDefaultEventWindowContent());\n    }\n  };\n\n  EventWindow.prototype.getDefaultEventWindowContent = function () {\n    var parentDiv = this.createDivElement(cls.EVENT_WINDOW_DIALOG_PARENT_CLASS);\n    var titleLocationDiv = this.createDivElement(cls.EVENT_WINDOW_TITLE_LOCATION_DIV_CLASS);\n    parentDiv.appendChild(titleLocationDiv);\n    titleLocationDiv.appendChild(this.renderTextBox(cls.SUBJECT_CLASS));\n    titleLocationDiv.appendChild(this.renderTextBox(cls.LOCATION_CLASS));\n    var startEndDateTimeDiv = this.createDivElement(cls.EVENT_WINDOW_START_END_DIV_CLASS);\n    parentDiv.appendChild(startEndDateTimeDiv);\n    startEndDateTimeDiv.appendChild(this.renderDateTimePicker(cls.EVENT_WINDOW_START_CLASS, this.onTimeChange.bind(this)));\n    startEndDateTimeDiv.appendChild(this.renderDateTimePicker(cls.EVENT_WINDOW_END_CLASS));\n    var allDayTimezoneDiv = this.createDivElement(cls.EVENT_WINDOW_ALLDAY_TZ_DIV_CLASS);\n    parentDiv.appendChild(allDayTimezoneDiv);\n    allDayTimezoneDiv.appendChild(this.renderCheckBox(cls.EVENT_WINDOW_ALL_DAY_CLASS));\n    allDayTimezoneDiv.appendChild(this.renderCheckBox(cls.TIME_ZONE_CLASS));\n    var timezoneParentDiv = this.createDivElement(cls.EVENT_WINDOW_TIME_ZONE_DIV_CLASS);\n    parentDiv.appendChild(timezoneParentDiv);\n    timezoneParentDiv.appendChild(this.renderDropDown(cls.EVENT_WINDOW_START_TZ_CLASS));\n    timezoneParentDiv.appendChild(this.renderDropDown(cls.EVENT_WINDOW_END_TZ_CLASS));\n    var repeatParentDiv = this.createDivElement(cls.EVENT_WINDOW_REPEAT_DIV_CLASS);\n    parentDiv.appendChild(repeatParentDiv);\n    var repeatDiv = this.renderCheckBox(cls.EVENT_WINDOW_REPEAT_CLASS);\n    var repeatEditConainer = createElement('span', {\n      className: REPEAT_CONTAINER_CLASS\n    });\n    var button = createElement('button', {\n      className: REPEAT_BUTTON_CLASS,\n      attrs: {\n        type: 'button',\n        'title': this.l10n.getConstant('editRecurrence')\n      }\n    });\n    this.buttonObj = new Button({\n      iconCss: REPEAT_BUTTON_ICON_CLASS + ' e-icons',\n      cssClass: 'e-medium ' + this.parent.cssClass\n    });\n    repeatEditConainer.appendChild(button);\n    this.buttonObj.appendTo(button);\n    this.buttonObj.isStringTemplate = true;\n    repeatDiv.appendChild(repeatEditConainer);\n    repeatParentDiv.appendChild(repeatDiv);\n\n    if (this.parent.isAdaptive) {\n      EventHandler.add(button, 'click', this.loadRecurrenceEditor, this);\n    } else {\n      this.createRecurrenceEditor(parentDiv);\n    }\n\n    if (this.parent.resourceCollection.length > 0) {\n      var resourceParentDiv = this.createDivElement(cls.EVENT_WINDOW_RESOURCES_DIV_CLASS);\n\n      for (var _i = 0, _a = this.parent.resourceBase.resourceCollection; _i < _a.length; _i++) {\n        var resource = _a[_i];\n        resourceParentDiv.appendChild(this.renderResourceDetails(resource));\n      }\n\n      parentDiv.appendChild(resourceParentDiv);\n    }\n\n    var description = this.createDivElement(cls.DESCRIPTION_CLASS + '-row');\n    description.appendChild(this.renderTextBox(cls.DESCRIPTION_CLASS));\n    parentDiv.appendChild(description);\n    var submit = createElement('button', {\n      attrs: {\n        type: 'hidden',\n        title: 'submit',\n        style: 'display:none'\n      }\n    });\n    parentDiv.appendChild(submit);\n    return parentDiv;\n  };\n\n  EventWindow.prototype.createRecurrenceEditor = function (parentDiv) {\n    var recurrenceEditor = this.createDivElement();\n    parentDiv.appendChild(recurrenceEditor);\n    this.recurrenceEditor = this.renderRecurrenceEditor();\n    this.recurrenceEditor.appendTo(recurrenceEditor);\n  };\n\n  EventWindow.prototype.createDivElement = function (className) {\n    return createElement('div', {\n      className: className\n    });\n  };\n\n  EventWindow.prototype.createInputElement = function (className, fieldName, type) {\n    return createElement(type || 'input', {\n      className: className,\n      attrs: {\n        type: 'text',\n        name: fieldName,\n        value: '',\n        title: this.l10n.getConstant(fieldName.charAt(0).toLowerCase() + fieldName.slice(1)) === '' ? fieldName : this.l10n.getConstant(fieldName.charAt(0).toLowerCase() + fieldName.slice(1))\n      }\n    });\n  };\n\n  EventWindow.prototype.getSlotDuration = function () {\n    return this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;\n  };\n\n  EventWindow.prototype.renderDateTimePicker = function (value, changeEvent) {\n    var dateTimeDiv = this.createDivElement(value + '-container');\n    var fieldName = this.getFieldName(value);\n    var dateTimeInput = this.createInputElement(value + ' ' + EVENT_FIELD, fieldName);\n    dateTimeDiv.appendChild(dateTimeInput);\n    var dateTimePicker = new DateTimePicker({\n      change: changeEvent,\n      firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,\n      calendarMode: this.parent.calendarMode,\n      cssClass: this.parent.cssClass,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      floatLabelType: 'Always',\n      format: (isNullOrUndefined(this.parent.dateFormat) ? this.getFormat('dateFormats') : this.parent.dateFormat) + ' ' + this.getFormat('timeFormats'),\n      placeholder: this.getFieldLabel(value),\n      step: this.getSlotDuration(),\n      value: this.parent.getCurrentTime(),\n      width: '100%'\n    });\n    dateTimePicker.isStringTemplate = true;\n    dateTimePicker.appendTo(dateTimeInput);\n    return dateTimeDiv;\n  };\n\n  EventWindow.prototype.refreshDateTimePicker = function (duration) {\n    var _this = this;\n\n    var startEndElement = [].slice.call(this.element.querySelectorAll('.' + cls.EVENT_WINDOW_START_CLASS + ',.' + cls.EVENT_WINDOW_END_CLASS));\n    startEndElement.forEach(function (element) {\n      var instance = element.ej2_instances[0];\n      instance.firstDayOfWeek = _this.parent.activeViewOptions.firstDayOfWeek;\n      instance.step = duration || _this.getSlotDuration();\n      instance.dataBind();\n    });\n  };\n\n  EventWindow.prototype.onTimeChange = function () {\n    var startObj = this.getInstance(cls.EVENT_WINDOW_START_CLASS);\n\n    if (startObj.element.parentElement.classList.contains('e-input-focus')) {\n      var endObj = this.getInstance(cls.EVENT_WINDOW_END_CLASS);\n      var duration = 0;\n\n      if (this.cellClickAction) {\n        duration = util.MS_PER_MINUTE * this.duration;\n        this.eventWindowTime.startTime = startObj.value;\n      } else {\n        duration = this.eventData[this.fields.endTime].getTime() - this.eventData[this.fields.startTime].getTime();\n      }\n\n      var endDate = new Date(startObj.value.getTime() + duration);\n\n      if (this.cellClickAction) {\n        this.eventWindowTime.endTime = endDate;\n      }\n\n      endObj.value = endDate;\n      endObj.dataBind();\n    }\n  };\n\n  EventWindow.prototype.renderResourceDetails = function (resourceData) {\n    var fieldName = resourceData.field;\n    var value = 'e-' + fieldName;\n    var labelValue = resourceData.title;\n    var resourceDiv = this.createDivElement(value + '-container' + ' ' + 'e-resources');\n    var resourceInput = this.createInputElement(value + ' ' + EVENT_FIELD, fieldName);\n    resourceDiv.appendChild(resourceInput);\n    var resourceTemplate = '<div class=\"e-resource-template\"><div class=\"e-resource-color\" style=\"background-color:${' + resourceData.colorField + '}\"></div><div class=\"e-resource-text\">${' + resourceData.textField + '}</div></div>';\n\n    if (resourceData.allowMultiple) {\n      var listObj = new MultiSelect({\n        cssClass: this.parent.cssClass || '',\n        dataSource: resourceData.dataSource,\n        change: this.onMultiselectResourceChange.bind(this),\n        itemTemplate: resourceTemplate,\n        fields: {\n          text: resourceData.textField,\n          value: resourceData.idField\n        },\n        htmlAttributes: {\n          'title': labelValue,\n          'name': fieldName\n        },\n        floatLabelType: 'Always',\n        placeholder: labelValue,\n        popupHeight: '230px',\n        popupWidth: '447px',\n        mode: 'Box'\n      });\n      listObj.appendTo(resourceInput);\n      listObj.isStringTemplate = true;\n    } else {\n      var drowDownList = new DropDownList({\n        cssClass: this.parent.cssClass || '',\n        change: this.onDropdownResourceChange.bind(this),\n        dataSource: resourceData.dataSource,\n        enableRtl: this.parent.enableRtl,\n        fields: {\n          text: resourceData.textField,\n          value: resourceData.idField\n        },\n        htmlAttributes: {\n          'title': labelValue,\n          'name': fieldName\n        },\n        floatLabelType: 'Always',\n        placeholder: labelValue,\n        popupHeight: '230px',\n        popupWidth: '447px',\n        itemTemplate: resourceTemplate\n      });\n      drowDownList.appendTo(resourceInput);\n      drowDownList.isStringTemplate = true;\n    }\n\n    return resourceDiv;\n  };\n\n  EventWindow.prototype.renderDropDown = function (value) {\n    var fieldName = this.getFieldName(value);\n    var timezoneDiv = this.createDivElement(value + '-container');\n    var timezoneInput = this.createInputElement(value + ' ' + EVENT_FIELD, fieldName);\n    timezoneDiv.appendChild(timezoneInput);\n    var drowDownList = new DropDownList({\n      allowFiltering: true,\n      change: this.onTimezoneChange.bind(this),\n      cssClass: this.parent.cssClass || '',\n      dataSource: timezoneData,\n      enableRtl: this.parent.enableRtl,\n      fields: {\n        text: 'Text',\n        value: 'Value'\n      },\n      filterBarPlaceholder: 'Search Timezone',\n      filtering: function (e) {\n        var query = new Query();\n        query = e.text !== '' ? query.where('Text', 'contains', e.text, true) : query;\n        e.updateData(timezoneData, query);\n      },\n      htmlAttributes: {\n        'title': this.getFieldLabel(value),\n        'name': fieldName\n      },\n      floatLabelType: 'Always',\n      placeholder: this.getFieldLabel(value),\n      popupHeight: '230px'\n    });\n    drowDownList.appendTo(timezoneInput);\n    drowDownList.isStringTemplate = true;\n    return timezoneDiv;\n  };\n\n  EventWindow.prototype.onMultiselectResourceChange = function (args) {\n    if (!args.value || !this.parent.activeViewOptions.group.byGroupID || this.parent.resourceCollection.length <= 1) {\n      return;\n    }\n\n    var resourceCollection = this.parent.resourceBase.resourceCollection;\n    var fieldName = args.element.getAttribute('name') || this.getColumnName(args.element);\n\n    for (var i = 0; i < resourceCollection.length; i++) {\n      if (resourceCollection[i].field === fieldName && i < resourceCollection.length - 1) {\n        var resObject = this.createInstance(i);\n        var datasource = [];\n\n        for (var j = 0; j < args.value.length; j++) {\n          var resourceData = resourceCollection[i + 1].dataSource;\n          var query = new Query().where(resourceCollection[i + 1].groupIDField, 'equal', args.value[j]);\n          var filter = new DataManager({\n            json: resourceData\n          }).executeLocal(query)[0];\n          var groupId = filter[resourceCollection[i + 1].idField];\n          var filterRes = this.filterDatasource(i, groupId);\n          datasource = datasource.concat(filterRes);\n        }\n\n        resObject.dataSource = datasource;\n        resObject.dataBind();\n      }\n    }\n  };\n\n  EventWindow.prototype.createInstance = function (index) {\n    var resourceData = this.parent.resourceBase.resourceCollection[index + 1];\n    var resObject = this.element.querySelector('.e-' + resourceData.field).ej2_instances[0];\n    return resObject;\n  };\n\n  EventWindow.prototype.onDropdownResourceChange = function (args) {\n    if (!args.value || this.parent.resourceCollection.length <= 1 || !this.parent.activeViewOptions.group.byGroupID) {\n      return;\n    }\n\n    var fieldName = args.element.getAttribute('name') || this.getColumnName(args.element);\n    var resourceCollection = this.parent.resourceBase.resourceCollection;\n\n    for (var i = 0; i < resourceCollection.length; i++) {\n      if (i < resourceCollection.length - 1 && resourceCollection[i].field === fieldName) {\n        var resObj = this.createInstance(i);\n        var groupId = args.itemData[resourceCollection[i].idField];\n        resObj.dataSource = this.filterDatasource(i, groupId);\n        resObj.dataBind();\n        var resValue = resObj.dataSource[0][resourceCollection[i + 1].idField];\n        resObj.value = resourceCollection[i + 1].allowMultiple ? [resValue] : resValue;\n        resObj.dataBind();\n      }\n    }\n  };\n\n  EventWindow.prototype.filterDatasource = function (index, groupId) {\n    var resourceData = this.parent.resourceBase.resourceCollection[index + 1];\n    var query = new Query().where(resourceData.groupIDField, 'equal', groupId);\n    var filter = new DataManager({\n      json: resourceData.dataSource\n    }).executeLocal(query);\n    return filter;\n  };\n\n  EventWindow.prototype.onTimezoneChange = function (args) {\n    var fieldName = args.element.getAttribute('name') || this.getColumnName(args.element);\n\n    if (fieldName === this.parent.eventFields.startTimezone) {\n      var startTimezoneObj = this.getInstance(cls.EVENT_WINDOW_START_TZ_CLASS);\n      var endTimezoneObj = this.getInstance(cls.EVENT_WINDOW_END_TZ_CLASS);\n      endTimezoneObj.value = startTimezoneObj.value;\n      endTimezoneObj.dataBind();\n    }\n  };\n\n  EventWindow.prototype.renderCheckBox = function (value) {\n    var checkBoxDiv = this.createDivElement(value + '-container');\n    var fieldName = this.getFieldName(value);\n    var checkBoxInput = this.createInputElement(value + ' ' + EVENT_FIELD, fieldName);\n    checkBoxDiv.appendChild(checkBoxInput);\n    var checkBox = new CheckBox({\n      change: this.onChange.bind(this),\n      cssClass: value + ' ' + this.parent.cssClass,\n      enableRtl: this.parent.enableRtl,\n      label: this.getFieldLabel(value)\n    });\n    checkBox.appendTo(checkBoxInput);\n    checkBox.isStringTemplate = true;\n    checkBoxInput.setAttribute('name', fieldName);\n\n    if (fieldName === 'Repeat') {\n      this.repeatStatus = checkBox;\n    }\n\n    return checkBoxDiv;\n  };\n\n  EventWindow.prototype.renderTextBox = function (value) {\n    var textBoxDiv = this.createDivElement(value + '-container');\n    var fieldName = this.getFieldName(value);\n    var elementType = value === cls.DESCRIPTION_CLASS ? 'textarea' : 'input';\n    var textBoxInput = this.createInputElement(value + ' ' + EVENT_FIELD, fieldName, elementType);\n    textBoxDiv.appendChild(textBoxInput);\n    Input.createInput({\n      element: textBoxInput,\n      floatLabelType: 'Always',\n      properties: {\n        enableRtl: this.parent.enableRtl,\n        placeholder: this.getFieldLabel(value)\n      }\n    });\n    return textBoxDiv;\n  };\n\n  EventWindow.prototype.getFieldName = function (name) {\n    var fieldName = '';\n\n    switch (name) {\n      case cls.SUBJECT_CLASS:\n        fieldName = this.fields.subject;\n        break;\n\n      case cls.LOCATION_CLASS:\n        fieldName = this.fields.location;\n        break;\n\n      case cls.EVENT_WINDOW_START_CLASS:\n        fieldName = this.fields.startTime;\n        break;\n\n      case cls.EVENT_WINDOW_END_CLASS:\n        fieldName = this.fields.endTime;\n        break;\n\n      case cls.DESCRIPTION_CLASS:\n        fieldName = this.fields.description;\n        break;\n\n      case cls.EVENT_WINDOW_ALL_DAY_CLASS:\n        fieldName = this.fields.isAllDay;\n        break;\n\n      case cls.EVENT_WINDOW_START_TZ_CLASS:\n        fieldName = this.fields.startTimezone;\n        break;\n\n      case cls.EVENT_WINDOW_END_TZ_CLASS:\n        fieldName = this.fields.endTimezone;\n        break;\n\n      case cls.TIME_ZONE_CLASS:\n        fieldName = 'Timezone';\n        break;\n\n      case cls.EVENT_WINDOW_REPEAT_CLASS:\n        fieldName = 'Repeat';\n        break;\n    }\n\n    return fieldName;\n  };\n\n  EventWindow.prototype.getFieldLabel = function (fieldName) {\n    var labelText = '';\n\n    switch (fieldName) {\n      case cls.SUBJECT_CLASS:\n        labelText = this.parent.editorTitles.subject;\n        break;\n\n      case cls.LOCATION_CLASS:\n        labelText = this.parent.editorTitles.location;\n        break;\n\n      case cls.DESCRIPTION_CLASS:\n        labelText = this.parent.editorTitles.description;\n        break;\n\n      case cls.EVENT_WINDOW_START_CLASS:\n        labelText = this.parent.editorTitles.startTime;\n        break;\n\n      case cls.EVENT_WINDOW_END_CLASS:\n        labelText = this.parent.editorTitles.endTime;\n        break;\n\n      case cls.EVENT_WINDOW_START_TZ_CLASS:\n        labelText = this.parent.editorTitles.startTimezone;\n        break;\n\n      case cls.EVENT_WINDOW_END_TZ_CLASS:\n        labelText = this.parent.editorTitles.endTimezone;\n        break;\n\n      case cls.EVENT_WINDOW_REPEAT_CLASS:\n        labelText = this.parent.editorTitles.recurrenceRule;\n        break;\n\n      case cls.EVENT_WINDOW_ALL_DAY_CLASS:\n        labelText = this.parent.editorTitles.isAllDay;\n        break;\n\n      case cls.TIME_ZONE_CLASS:\n        labelText = this.l10n.getConstant('timezone');\n        break;\n    }\n\n    return labelText;\n  };\n\n  EventWindow.prototype.onChange = function (args) {\n    var target = args.event.target;\n\n    if (target.classList.contains(cls.EVENT_WINDOW_ALL_DAY_CLASS)) {\n      this.onAllDayChange(args.checked);\n    } else if (target.classList.contains(cls.TIME_ZONE_CLASS)) {\n      this.timezoneChangeStyle(args.checked);\n    } else if (target.classList.contains(cls.EVENT_WINDOW_REPEAT_CLASS)) {\n      this.onRepeatChange(args.checked);\n    }\n  };\n\n  EventWindow.prototype.renderRepeatDialog = function () {\n    var element = createElement('div');\n    this.repeatDialogObject = new Dialog({\n      header: this.l10n.getConstant('recurrence'),\n      visible: false,\n      content: '<div class=\"e-rec-editor\"></div>',\n      closeOnEscape: true,\n      width: '90%',\n      buttons: [{\n        click: this.repeatSaveDialog.bind(this),\n        buttonModel: {\n          content: this.l10n.getConstant('save'),\n          cssClass: 'e-save',\n          isPrimary: true\n        }\n      }, {\n        click: this.repeatCancelDialog.bind(this),\n        buttonModel: {\n          cssClass: 'e-cancel',\n          content: this.l10n.getConstant('cancel')\n        }\n      }],\n      target: this.element,\n      animationSettings: {\n        effect: 'Zoom'\n      },\n      enableRtl: this.parent.enableRtl,\n      isModal: true,\n      cssClass: REPEAT_DIALOG_CLASS,\n      open: this.repeatOpenDialog.bind(this)\n    });\n    this.element.appendChild(element);\n    this.repeatDialogObject.appendTo(element);\n    this.repeatDialogObject.isStringTemplate = true;\n    this.createRecurrenceEditor(this.repeatDialogObject.element.querySelector('.e-rec-editor'));\n  };\n\n  EventWindow.prototype.loadRecurrenceEditor = function () {\n    this.repeatDialogObject.show();\n\n    if (this.recurrenceEditor && this.repeatRule) {\n      this.recurrenceEditor.setRecurrenceRule(this.repeatRule);\n    }\n  };\n\n  EventWindow.prototype.onRepeatChange = function (state) {\n    if (state) {\n      if (!this.repeatDialogObject) {\n        this.renderRepeatDialog();\n      }\n\n      this.recurrenceEditor.setProperties({\n        startDate: this.repeatStartDate,\n        selectedType: 0\n      });\n      this.loadRecurrenceEditor();\n    } else {\n      if (this.repeatDialogObject) {\n        this.repeatDialogObject.hide();\n      }\n\n      this.repeatRule = '';\n\n      if (this.recurrenceEditor) {\n        this.recurrenceEditor.setRecurrenceRule(this.repeatRule);\n        this.updateRepeatLabel(this.repeatRule);\n      }\n\n      var element = this.element.querySelector('.' + REPEAT_CONTAINER_CLASS);\n      addClass([element], HIDE_STYLE_CLASS);\n    }\n  };\n\n  EventWindow.prototype.repeatSaveDialog = function () {\n    this.repeatRule = this.recurrenceEditor.getRecurrenceRule();\n    var element = this.element.querySelector('.' + REPEAT_CONTAINER_CLASS);\n\n    if (this.recurrenceEditor.getRecurrenceRule()) {\n      removeClass([element], HIDE_STYLE_CLASS);\n    } else {\n      addClass([element], HIDE_STYLE_CLASS);\n      this.repeatStatus.setProperties({\n        checked: false\n      });\n    }\n\n    this.updateRepeatLabel(this.repeatRule);\n    this.closeRepeatDialog();\n  };\n\n  EventWindow.prototype.closeRepeatDialog = function () {\n    this.repeatDialogObject.hide();\n  };\n\n  EventWindow.prototype.repeatCancelDialog = function () {\n    this.closeRepeatDialog();\n\n    if (this.recurrenceEditor) {\n      this.recurrenceEditor.setRecurrenceRule(this.repeatTempRule);\n    }\n\n    if (!this.repeatTempRule) {\n      this.repeatStatus.setProperties({\n        checked: false\n      });\n    }\n  };\n\n  EventWindow.prototype.repeatOpenDialog = function () {\n    this.repeatTempRule = this.recurrenceEditor.getRecurrenceRule();\n  };\n\n  EventWindow.prototype.onCellDetailsUpdate = function (eventObj, repeatType) {\n    if (!this.parent.eventSettings.allowAdding) {\n      return;\n    }\n\n    this.element.querySelector('.' + cls.FORM_CLASS).removeAttribute('data-id');\n    this.element.querySelector('.' + cls.EVENT_WINDOW_TITLE_TEXT_CLASS).innerHTML = this.l10n.getConstant('newEvent');\n    eventObj.Timezone = false;\n    this.repeatStartDate = eventObj[this.fields.startTime];\n    this.repeatRule = '';\n    this.showDetails(eventObj);\n\n    if (eventObj[this.fields.recurrenceRule] && this.recurrenceEditor) {\n      this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);\n      this.repeatRule = eventObj[this.fields.recurrenceRule];\n    }\n\n    var deleteButton = this.element.querySelector('.' + cls.DELETE_EVENT_CLASS);\n\n    if (deleteButton) {\n      addClass([deleteButton], cls.DISABLE_CLASS);\n    }\n\n    if (this.recurrenceEditor) {\n      this.recurrenceEditor.setProperties({\n        startDate: eventObj[this.fields.startTime],\n        selectedType: !isNullOrUndefined(repeatType) ? repeatType : !isNullOrUndefined(eventObj[this.fields.recurrenceRule]) ? this.recurrenceEditor.selectedType : 0\n      });\n    }\n\n    if (this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {\n      var element = this.element.querySelector('.' + REPEAT_CONTAINER_CLASS);\n      addClass([element], HIDE_STYLE_CLASS);\n      this.updateRepeatLabel(this.repeatRule);\n    } else {\n      var saveButton = this.element.querySelector('.' + cls.EVENT_WINDOW_SAVE_BUTTON_CLASS);\n      this.disableButton(saveButton, false);\n    }\n\n    this.dialogObject.show();\n  };\n\n  EventWindow.prototype.convertToEventData = function (cellsData, eventObj) {\n    if (cellsData.subject) {\n      eventObj[this.fields.subject] = cellsData.subject;\n    }\n\n    eventObj[this.fields.startTime] = cellsData.startTime;\n    eventObj[this.fields.endTime] = cellsData.endTime;\n    eventObj[this.fields.isAllDay] = cellsData.isAllDay;\n\n    if (cellsData.RecurrenceRule) {\n      eventObj[this.fields.recurrenceRule] = cellsData.RecurrenceRule;\n    }\n\n    if (this.parent.resourceCollection.length > 0 || this.parent.activeViewOptions.group.resources.length > 0) {\n      this.parent.resourceBase.setResourceValues(eventObj, false);\n    }\n  };\n\n  EventWindow.prototype.applyFormValidation = function () {\n    var getValidationRule = function (rules) {\n      return rules && Object.keys(rules).length > 0 ? rules : undefined;\n    };\n\n    var form = this.element.querySelector('.' + cls.FORM_CLASS);\n    var rules = {};\n    rules[this.parent.eventSettings.fields.subject.name] = getValidationRule(this.parent.eventSettings.fields.subject.validation);\n    rules[this.parent.eventSettings.fields.location.name] = getValidationRule(this.parent.eventSettings.fields.location.validation);\n    rules[this.parent.eventSettings.fields.startTime.name] = getValidationRule(this.parent.eventSettings.fields.startTime.validation);\n    rules[this.parent.eventSettings.fields.endTime.name] = getValidationRule(this.parent.eventSettings.fields.endTime.validation);\n    rules[this.parent.eventSettings.fields.description.name] = getValidationRule(this.parent.eventSettings.fields.description.validation);\n    this.fieldValidator.renderFormValidator(form, rules, this.element);\n  };\n\n  EventWindow.prototype.showDetails = function (eventData) {\n    var eventObj = extend({}, eventData, null, true);\n\n    if (eventObj[this.fields.endTime].getHours() === 0 && eventObj[this.fields.endTime].getMinutes() === 0) {\n      this.trimAllDay(eventObj);\n    }\n\n    this.eventData = eventObj;\n    var formelement = this.getFormElements(cls.EVENT_WINDOW_DIALOG_CLASS);\n    var keyNames = Object.keys(eventObj);\n\n    for (var _i = 0, formelement_1 = formelement; _i < formelement_1.length; _i++) {\n      var curElement = formelement_1[_i];\n      var columnName = curElement.name || this.getColumnName(curElement);\n\n      if (!isNullOrUndefined(columnName) && columnName !== '') {\n        if (keyNames.indexOf(columnName) !== -1) {\n          this.setValueToElement(curElement, eventObj[columnName]);\n        } else {\n          this.setDefaultValueToElement(curElement);\n        }\n      }\n    }\n\n    if (isNullOrUndefined(this.parent.editorTemplate)) {\n      this.onAllDayChange(eventObj[this.fields.isAllDay]);\n      var timezoneObj = this.getInstance(cls.TIME_ZONE_CLASS + '.' + EVENT_FIELD);\n\n      if (!(isNullOrUndefined(eventObj[this.fields.startTimezone]) && isNullOrUndefined(eventObj[this.fields.endTimezone]))) {\n        timezoneObj.checked = true;\n        timezoneObj.dataBind();\n      }\n\n      this.timezoneChangeStyle(timezoneObj.checked);\n      delete eventObj.Timezone;\n    }\n  };\n\n  EventWindow.prototype.getColumnName = function (element) {\n    var attrName = element.getAttribute('data-name') || '';\n\n    if (attrName === '') {\n      var isDropDowns = false;\n      var fieldSelector = '';\n\n      if (element.classList.contains('e-dropdownlist')) {\n        fieldSelector = 'e-ddl';\n        isDropDowns = true;\n      } else if (element.classList.contains('e-multiselect')) {\n        fieldSelector = 'e-multiselect';\n        isDropDowns = true;\n      } else if (element.classList.contains('e-datetimepicker')) {\n        fieldSelector = 'e-datetimepicker';\n      } else if (element.classList.contains('e-datepicker')) {\n        fieldSelector = 'e-datepicker';\n      } else if (element.classList.contains('e-checkbox')) {\n        fieldSelector = 'e-checkbox';\n      }\n\n      var classSelector = isDropDowns ? \".\" + fieldSelector + \":not(.e-control)\" : \".\" + fieldSelector;\n      var control = closest(element, classSelector) || element.querySelector(\".\" + fieldSelector);\n\n      if (control) {\n        var attrEle = control.querySelector('[name]');\n\n        if (attrEle) {\n          attrName = attrEle.name;\n        }\n      }\n    }\n\n    return attrName;\n  };\n\n  EventWindow.prototype.onAllDayChange = function (allDayStatus) {\n    var startObj = this.getInstance(cls.EVENT_WINDOW_START_CLASS);\n    var endObj = this.getInstance(cls.EVENT_WINDOW_END_CLASS);\n    var timezoneDiv = this.element.querySelector('.e-time-zone-container');\n    var format;\n\n    if (allDayStatus) {\n      format = isNullOrUndefined(this.parent.dateFormat) ? this.getFormat('dateFormats') : this.parent.dateFormat;\n      addClass(this.element.querySelectorAll('.e-time-icon'), cls.EVENT_WINDOW_ICON_DISABLE_CLASS);\n      addClass([timezoneDiv], cls.DISABLE_CLASS);\n\n      if (this.element.querySelector('.' + cls.EVENT_WINDOW_TIME_ZONE_DIV_CLASS)) {\n        removeClass([this.element.querySelector('.' + cls.EVENT_WINDOW_TIME_ZONE_DIV_CLASS)], cls.ENABLE_CLASS);\n      }\n\n      startObj.format = endObj.format = format;\n    } else {\n      format = isNullOrUndefined(this.parent.dateFormat) ? this.getFormat('dateFormats') + ' ' + this.getFormat('timeFormats') : this.parent.dateFormat + ' ' + this.getFormat('timeFormats');\n      removeClass(this.element.querySelectorAll('.e-time-icon'), cls.EVENT_WINDOW_ICON_DISABLE_CLASS);\n      removeClass([timezoneDiv], cls.DISABLE_CLASS);\n\n      if (this.element.querySelector('.e-checkbox-wrapper .e-time-zone').checked) {\n        addClass([this.element.querySelector('.' + cls.EVENT_WINDOW_TIME_ZONE_DIV_CLASS)], cls.ENABLE_CLASS);\n      }\n\n      startObj.format = endObj.format = format;\n    }\n\n    if (this.cellClickAction) {\n      this.updateDateTime(allDayStatus, startObj, endObj);\n    }\n\n    startObj.dataBind();\n    endObj.dataBind();\n  };\n\n  EventWindow.prototype.updateDateTime = function (allDayStatus, startObj, endObj) {\n    var startDate;\n    var endDate;\n\n    if (allDayStatus) {\n      startDate = util.resetTime(new Date(this.eventWindowTime.startTime.getTime()));\n\n      if (this.parent.activeCellsData.isAllDay) {\n        var temp = util.addDays(new Date(this.eventWindowTime.endTime.getTime()), -1).getTime();\n        endDate = +this.eventWindowTime.startTime > temp ? this.eventWindowTime.endTime : new Date(temp);\n      } else {\n        endDate = util.resetTime(new Date(this.eventWindowTime.endTime.getTime()));\n      }\n    } else {\n      var start = this.parent.activeCellsData.startTime;\n      startDate = new Date(this.eventWindowTime.startTime.getTime());\n      startDate.setHours(start.getHours(), start.getMinutes(), start.getSeconds());\n\n      if (this.parent.activeCellsData.isAllDay) {\n        var startHour = this.parent.getStartEndTime(this.parent.workHours.start);\n        startDate.setHours(startHour.getHours(), startHour.getMinutes(), startHour.getSeconds());\n        endDate = new Date(startDate.getTime());\n        endDate.setMilliseconds(util.MS_PER_MINUTE * this.getSlotDuration());\n      } else {\n        endDate = new Date(startDate.getTime());\n        endDate.setMilliseconds(this.parent.activeCellsData.endTime.getTime() - this.parent.activeCellsData.startTime.getTime());\n      }\n    }\n\n    this.eventWindowTime = {\n      startTime: new Date(startDate.getTime()),\n      endTime: new Date(endDate.getTime())\n    };\n    startObj.value = startDate;\n    endObj.value = endDate;\n    startObj.dataBind();\n    endObj.dataBind();\n  };\n\n  EventWindow.prototype.getFormat = function (formatType) {\n    var format;\n\n    if (this.parent.locale === 'en' || this.parent.locale === 'en-US') {\n      format = getValue(formatType + '.short', getDefaultDateObject(this.parent.getCalendarMode()));\n    } else {\n      format = getValue( // tslint:disable-next-line:max-line-length\n      'main.' + '' + this.parent.locale + '.dates.calendars.' + this.parent.getCalendarMode() + '.' + formatType + '.short', cldrData);\n    }\n\n    return format;\n  };\n\n  EventWindow.prototype.onEventDetailsUpdate = function (eventObj) {\n    if (!this.parent.eventSettings.allowEditing) {\n      return;\n    }\n\n    if (!this.parent.isAdaptive) {\n      removeClass([this.element.querySelector('.' + cls.DELETE_EVENT_CLASS)], cls.DISABLE_CLASS);\n    }\n\n    this.element.querySelector('.' + cls.EVENT_WINDOW_TITLE_TEXT_CLASS).innerHTML = this.l10n.getConstant('editEvent');\n    this.element.querySelector('.' + cls.FORM_CLASS).setAttribute('data-id', eventObj[this.fields.id].toString());\n\n    if (isNullOrUndefined(this.parent.editorTemplate)) {\n      eventObj = extend({}, eventObj, null, true);\n      var timezoneObj = this.getInstance(cls.TIME_ZONE_CLASS + '.' + EVENT_FIELD);\n      var timezoneValue = void 0;\n\n      if (eventObj[this.fields.startTimezone] || eventObj[this.fields.endTimezone]) {\n        timezoneValue = true;\n        this.parent.eventBase.timezoneConvert(eventObj);\n      } else {\n        timezoneValue = false;\n      }\n\n      eventObj.Timezone = timezoneValue;\n      timezoneObj.checked = timezoneValue;\n      timezoneObj.dataBind();\n    }\n\n    this.showDetails(eventObj);\n\n    if (eventObj[this.fields.recurrenceRule] && this.recurrenceEditor) {\n      this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);\n    } else if (!this.parent.isAdaptive && this.recurrenceEditor) {\n      this.recurrenceEditor.setProperties({\n        startDate: eventObj[this.fields.startTime]\n      });\n      this.recurrenceEditor.setRecurrenceRule('');\n    }\n\n    this.repeatStartDate = eventObj[this.fields.startTime];\n    this.repeatRule = '';\n\n    if (eventObj[this.fields.recurrenceRule]) {\n      if (this.recurrenceEditor) {\n        this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);\n      }\n\n      this.repeatRule = eventObj[this.fields.recurrenceRule];\n    }\n\n    if (this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {\n      var element = this.element.querySelector('.' + REPEAT_CONTAINER_CLASS);\n\n      if (eventObj[this.fields.recurrenceRule]) {\n        removeClass([element], HIDE_STYLE_CLASS);\n        this.repeatStatus.setProperties({\n          checked: true\n        });\n      } else {\n        addClass([element], HIDE_STYLE_CLASS);\n        this.repeatStatus.setProperties({\n          checked: false\n        });\n      }\n\n      this.updateRepeatLabel(this.repeatRule);\n    }\n\n    var isDisable = this.parent.readonly || eventObj[this.fields.isReadonly];\n\n    if (!this.parent.isAdaptive) {\n      var saveButton = this.element.querySelector('.' + cls.EVENT_WINDOW_SAVE_BUTTON_CLASS);\n      var deleteButton = this.element.querySelector('.' + cls.DELETE_EVENT_CLASS);\n      this.disableButton(saveButton, isDisable);\n      this.disableButton(deleteButton, isDisable);\n    } else {\n      var saveIcon = this.element.querySelector('.' + cls.EVENT_WINDOW_SAVE_ICON_CLASS);\n\n      if (saveIcon) {\n        if (isDisable) {\n          addClass([saveIcon], cls.ICON_DISABLE_CLASS);\n        } else {\n          removeClass([saveIcon], cls.ICON_DISABLE_CLASS);\n        }\n      }\n    }\n\n    this.dialogObject.show();\n  };\n\n  EventWindow.prototype.disableButton = function (element, value) {\n    if (element) {\n      element.ej2_instances[0].disabled = value;\n    }\n  };\n\n  EventWindow.prototype.renderRecurrenceEditor = function () {\n    return new RecurrenceEditor({\n      calendarMode: this.parent.calendarMode,\n      cssClass: this.parent.cssClass,\n      dateFormat: this.parent.dateFormat,\n      enableRtl: this.parent.enableRtl,\n      firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,\n      locale: this.parent.locale\n    });\n  };\n\n  EventWindow.prototype.updateRepeatLabel = function (repeatRule) {\n    if (this.parent.isAdaptive && !this.repeatDialogObject) {\n      this.renderRepeatDialog();\n    }\n\n    var data = repeatRule ? this.l10n.getConstant('repeats') + ' ' + this.recurrenceEditor.getRuleSummary(repeatRule) : this.l10n.getConstant('repeat');\n    this.repeatStatus.setProperties({\n      label: data\n    });\n  };\n\n  EventWindow.prototype.dialogClose = function () {\n    this.isCrudAction = false;\n    this.parent.activeEventData = {\n      event: undefined,\n      element: undefined\n    };\n    this.parent.currentAction = null;\n    this.dialogObject.hide();\n  };\n\n  EventWindow.prototype.resetForm = function () {\n    this.fieldValidator.destroyToolTip();\n    this.resetFormFields();\n\n    if (!this.parent.isAdaptive && this.recurrenceEditor) {\n      this.recurrenceEditor.resetFields();\n    }\n  };\n\n  EventWindow.prototype.timezoneChangeStyle = function (value) {\n    var timezoneDiv = this.element.querySelector('.' + cls.EVENT_WINDOW_TIME_ZONE_DIV_CLASS);\n    var localTimezoneName = this.parent.tzModule.getLocalTimezoneName();\n\n    if (value) {\n      addClass([timezoneDiv], cls.ENABLE_CLASS);\n      var startTimezoneObj = this.getInstance(cls.EVENT_WINDOW_START_TZ_CLASS);\n      var endTimezoneObj = this.getInstance(cls.EVENT_WINDOW_END_TZ_CLASS);\n      var timezone = startTimezoneObj.dataSource;\n\n      if (!startTimezoneObj.value || !this.parent.timezone) {\n        var found = timezone.some(function (tz) {\n          return tz.Value === localTimezoneName;\n        });\n\n        if (!found) {\n          timezone.push({\n            Value: localTimezoneName,\n            Text: localTimezoneName\n          });\n          startTimezoneObj.dataSource = timezone;\n          endTimezoneObj.dataSource = timezone;\n          startTimezoneObj.dataBind();\n          endTimezoneObj.dataBind();\n        }\n      }\n\n      startTimezoneObj.value = startTimezoneObj.value || this.parent.timezone || localTimezoneName;\n      endTimezoneObj.value = endTimezoneObj.value || this.parent.timezone || localTimezoneName;\n      startTimezoneObj.dataBind();\n      endTimezoneObj.dataBind();\n    } else {\n      removeClass([timezoneDiv], cls.ENABLE_CLASS);\n    }\n  };\n\n  EventWindow.prototype.resetFormFields = function () {\n    var formElement = this.getFormElements(cls.EVENT_WINDOW_DIALOG_CLASS);\n\n    for (var _i = 0, formElement_1 = formElement; _i < formElement_1.length; _i++) {\n      var currentElement = formElement_1[_i];\n      var columnName = currentElement.name || this.getColumnName(currentElement);\n\n      if (!isNullOrUndefined(columnName) && columnName !== '') {\n        this.setDefaultValueToElement(currentElement);\n      }\n    }\n  };\n\n  EventWindow.prototype.eventSave = function (alert) {\n    var formElement = this.element.querySelector('.' + cls.FORM_CLASS);\n\n    if (formElement && formElement.classList.contains('e-formvalidator') && !formElement.ej2_instances[0].validate()) {\n      return;\n    }\n\n    var dataCollection = this.getEventDataFromEditor();\n\n    if (this.processEventValidation(dataCollection.tempData, alert)) {\n      return;\n    }\n\n    this.eventCrudData = dataCollection.eventData;\n    this.isCrudAction = true;\n    this.dialogObject.hide();\n  };\n\n  EventWindow.prototype.getEventDataFromEditor = function () {\n    var eventObj = extend({}, this.getObjectFromFormData(cls.EVENT_WINDOW_DIALOG_CLASS));\n\n    if (!eventObj.Timezone) {\n      eventObj[this.fields.startTimezone] = null;\n      eventObj[this.fields.endTimezone] = null;\n    }\n\n    delete eventObj.Timezone;\n    delete eventObj.Repeat;\n    this.setDefaultValueToObject(eventObj);\n    eventObj[this.fields.recurrenceRule] = this.recurrenceEditor ? this.recurrenceEditor.getRecurrenceRule() || null : undefined;\n    var tempObj = extend({}, eventObj, null, true);\n\n    if (eventObj[this.fields.isAllDay]) {\n      eventObj[this.fields.startTime] = util.resetTime(new Date(eventObj[this.fields.startTime].getTime()));\n      eventObj[this.fields.endTime] = util.addDays(util.resetTime(new Date(eventObj[this.fields.endTime].getTime())), 1);\n    }\n\n    return {\n      eventData: eventObj,\n      tempData: tempObj\n    };\n  };\n\n  EventWindow.prototype.processEventValidation = function (eventObj, alert) {\n    var alertType;\n\n    if (isNullOrUndefined(this.parent.editorTemplate)) {\n      if (!eventObj[this.fields.startTime] || !eventObj[this.fields.endTime]) {\n        this.parent.quickPopup.openValidationError('invalidDateError');\n        return true;\n      }\n\n      if (eventObj[this.fields.startTime] > eventObj[this.fields.endTime]) {\n        this.parent.quickPopup.openValidationError('startEndError');\n        return true;\n      }\n    }\n\n    if (this.recurrenceEditor && this.recurrenceEditor.value && this.recurrenceEditor.value !== '') {\n      alertType = this.recurrenceValidation(eventObj[this.fields.startTime], eventObj[this.fields.endTime], alert);\n      var isShowAlert = true;\n\n      if (alertType === 'seriesChangeAlert' && this.parent.uiStateValues.isIgnoreOccurrence) {\n        isShowAlert = false;\n      }\n\n      if (!isNullOrUndefined(alertType) && isShowAlert && (!this.parent.enableRecurrenceValidation && alertType === 'wrongPattern' || this.parent.enableRecurrenceValidation)) {\n        this.parent.quickPopup.openRecurrenceValidationAlert(alertType);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  EventWindow.prototype.processCrudActions = function (eventObj) {\n    this.parent.uiStateValues.isBlock = false;\n    var resourceData = this.getResourceData(eventObj);\n    var isResourceEventExpand = (this.parent.activeViewOptions.group.resources.length > 0 || this.parent.resourceCollection.length > 0) && !this.parent.activeViewOptions.group.allowGroupEdit && !isNullOrUndefined(resourceData);\n    var eventId = this.getEventIdFromForm();\n\n    if (!isNullOrUndefined(eventId)) {\n      var eveId = this.parent.eventBase.getEventIDType() === 'string' ? eventId : parseInt(eventId, 10);\n      var editedData = new DataManager({\n        json: this.parent.eventsData\n      }).executeLocal(new Query().where(this.fields.id, 'equal', eveId))[0];\n      eventObj = extend({}, editedData, eventObj);\n\n      if (eventObj[this.fields.isReadonly]) {\n        return false;\n      }\n\n      var currentAction = void 0;\n\n      if (!isNullOrUndefined(editedData[this.fields.recurrenceRule])) {\n        currentAction = this.parent.currentAction;\n        eventObj.Guid = this.parent.activeEventData.event.Guid;\n\n        if (this.parent.currentAction === 'EditOccurrence') {\n          if (!eventObj[this.fields.recurrenceID]) {\n            eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();\n            eventObj.Guid = this.parent.activeEventData.event.Guid;\n          } else {\n            eveId = eventObj[this.fields.recurrenceID];\n            currentAction = null;\n          }\n\n          if (this.parent.enableRecurrenceValidation && this.editOccurrenceValidation(eveId, eventObj)) {\n            this.parent.quickPopup.openRecurrenceValidationAlert('sameDayAlert');\n            return true;\n          }\n        }\n\n        if (this.parent.currentAction === 'EditSeries' || eventObj[this.fields.id] !== editedData[this.fields.id]) {\n          eventObj[this.fields.recurrenceID] = editedData[this.fields.id];\n        } else if (this.parent.currentAction === 'EditFollowingEvents') {\n          eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();\n          eventObj[this.fields.followingID] = editedData[this.fields.id];\n        }\n      }\n\n      if (isResourceEventExpand) {\n        this.resourceSaveEvent(eventObj, 'Save', currentAction);\n      } else {\n        this.parent.saveEvent(eventObj, currentAction);\n      }\n    } else {\n      this.parent.currentAction = 'Add';\n\n      if (isResourceEventExpand) {\n        this.resourceSaveEvent(eventObj, this.parent.currentAction);\n      } else {\n        eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();\n        this.parent.addEvent(eventObj);\n      }\n    }\n\n    return this.parent.uiStateValues.isBlock;\n  };\n\n  EventWindow.prototype.getResourceData = function (eventObj) {\n    var resourceData = null;\n\n    if (!isNullOrUndefined(this.parent.resourceBase) && !isNullOrUndefined(this.parent.resourceBase.resourceCollection) && this.parent.resourceBase.resourceCollection.length > 0) {\n      var lastResouceData = this.parent.resourceBase.resourceCollection.slice(-1)[0];\n      resourceData = eventObj[lastResouceData.field];\n    }\n\n    return resourceData;\n  };\n\n  EventWindow.prototype.getObjectFromFormData = function (className) {\n    var formElement = this.getFormElements(className);\n    var eventObj = {};\n\n    for (var _i = 0, formElement_2 = formElement; _i < formElement_2.length; _i++) {\n      var currentElement = formElement_2[_i];\n      var columnName = currentElement.name || this.getColumnName(currentElement);\n\n      if (!isNullOrUndefined(columnName) && columnName !== '') {\n        eventObj[columnName] = this.getValueFromElement(currentElement);\n      }\n    }\n\n    return eventObj;\n  };\n\n  EventWindow.prototype.setDefaultValueToObject = function (eventObj) {\n    if (!isNullOrUndefined(eventObj[this.fields.subject])) {\n      eventObj[this.fields.subject] = eventObj[this.fields.subject] || this.parent.eventSettings.fields.subject.default;\n    }\n\n    if (!isNullOrUndefined(eventObj[this.fields.location])) {\n      eventObj[this.fields.location] = eventObj[this.fields.location] || this.parent.eventSettings.fields.location.default;\n    }\n\n    if (!isNullOrUndefined(eventObj[this.fields.description])) {\n      eventObj[this.fields.description] = eventObj[this.fields.description] || this.parent.eventSettings.fields.description.default;\n    }\n  };\n\n  EventWindow.prototype.recurrenceValidation = function (startDate, endDate, alert) {\n    var alertMessage;\n    var recEditor = this.recurrenceEditor;\n    var interval = this.getInstance('e-repeat-interval.e-numerictextbox').value;\n\n    if (alert !== this.l10n.getConstant('ok')) {\n      var activeEvent = this.parent.activeEventData.event;\n      var excludedEvents = [];\n\n      if ((this.parent.currentAction === 'EditSeries' || this.parent.currentAction === 'EditFollowingEvents') && !isNullOrUndefined(activeEvent)) {\n        var eventStartTime = activeEvent[this.parent.eventFields.startTime];\n        var seriesEvents = this.parent.eventBase.getSeriesEvents(this.eventData, eventStartTime);\n\n        if (seriesEvents.length > 0) {\n          excludedEvents = this.parent.eventBase.getEditedOccurrences(seriesEvents, eventStartTime);\n        } else {\n          var event_2 = this.parent.eventBase.getEventById(activeEvent[this.parent.eventFields.id]);\n          excludedEvents = this.parent.eventBase.getEditedOccurrences([event_2], eventStartTime);\n        }\n\n        if (this.parent.currentAction === 'EditSeries' && !isNullOrUndefined(this.eventData[this.parent.eventFields.recurrenceException])) {\n          excludedEvents.push(this.eventData);\n        }\n      }\n\n      if (excludedEvents.length > 0) {\n        alertMessage = 'seriesChangeAlert';\n      }\n\n      if (this.getInstance('e-end-on-left .e-ddl .e-dropdownlist').value === 'until' && this.getInstance('e-end-on-date .e-datepicker').value < startDate) {\n        alertMessage = 'wrongPattern';\n      }\n\n      if (isNullOrUndefined(alertMessage)) {\n        switch (recEditor.value.split(';')[0].split('=')[1]) {\n          case 'DAILY':\n            if ((endDate.getTime() - startDate.getTime()) / (1000 * 3600) >= interval * 24) {\n              alertMessage = 'createError';\n            }\n\n            break;\n\n          case 'WEEKLY':\n            var types = recEditor.value.split(';')[1].split('=')[1].split(',');\n            var obj = {\n              'SU': 0,\n              'MO': 1,\n              'TU': 2,\n              'WE': 3,\n              'TH': 4,\n              'FR': 5,\n              'SA': 6\n            };\n            var temp = [];\n            var tempDiff = [];\n\n            for (var index = 0; index < types.length * (interval + 1); index++) {\n              temp[index] = types.length > index ? obj[types[index]] : temp[index - types.length] + 7 * interval;\n            }\n\n            var tempvalue = temp.sort(function (a, b) {\n              return a - b;\n            });\n\n            for (var index = 1; index < tempvalue.length; index++) {\n              tempDiff.push(tempvalue[index] - tempvalue[index - 1]);\n            }\n\n            if ((endDate.getTime() - startDate.getTime()) / (1000 * 3600) >= Math.min.apply(Math, tempDiff) * 24 || isNullOrUndefined(interval)) {\n              alertMessage = 'createError';\n            }\n\n            break;\n\n          case 'MONTHLY':\n            if (endDate.getTime() >= new Date(+startDate).setMonth(startDate.getMonth() + interval)) {\n              alertMessage = 'createError';\n            }\n\n            break;\n\n          case 'YEARLY':\n            if (endDate.getTime() >= new Date(+startDate).setFullYear(startDate.getFullYear() + interval)) {\n              alertMessage = 'createError';\n            }\n\n            break;\n        }\n      }\n    } else {\n      if (endDate.getTime() >= new Date(+startDate).setMonth(startDate.getMonth() + interval)) {\n        alertMessage = 'createError';\n      }\n\n      if (isNullOrUndefined(alertMessage)) {\n        this.parent.quickPopup.quickDialog.hide();\n      }\n    }\n\n    return alertMessage;\n  };\n\n  EventWindow.prototype.getRecurrenceIndex = function (recColl, event) {\n    var recIndex;\n\n    for (var index = 0; index < recColl.length; index++) {\n      if (event[this.fields.startTime].valueOf() === recColl[index][this.fields.startTime].valueOf()) {\n        recIndex = index;\n        break;\n      }\n    }\n\n    return recIndex;\n  };\n\n  EventWindow.prototype.trimAllDay = function (data) {\n    if (data[this.fields.isAllDay]) {\n      var temp = util.addDays(new Date(+data[this.fields.endTime]), -1).getTime();\n      data[this.fields.endTime] = +data[this.fields.startTime] > temp ? data[this.fields.endTime] : new Date(temp);\n    }\n  };\n\n  EventWindow.prototype.editOccurrenceValidation = function (eventId, currentData, editData) {\n    if (editData === void 0) {\n      editData = this.eventData;\n    }\n\n    var recurColl = this.parent.getOccurrencesByID(eventId);\n    var excludedDatas = new DataManager({\n      json: this.parent.eventsData\n    }).executeLocal(new Query().where(this.fields.recurrenceID, 'equal', eventId));\n    excludedDatas.map(function (data) {\n      return recurColl.push(extend({}, data));\n    });\n    currentData = extend({}, currentData);\n    this.trimAllDay(currentData);\n\n    for (var _i = 0, recurColl_1 = recurColl; _i < recurColl_1.length; _i++) {\n      var data = recurColl_1[_i];\n      this.trimAllDay(data);\n    }\n\n    this.parent.eventBase.sortByTime(recurColl);\n    var index = this.getRecurrenceIndex(recurColl, editData);\n\n    if (isNullOrUndefined(index)) {\n      return false;\n    }\n\n    if (index === 0) {\n      if (!isNullOrUndefined(recurColl[index + 1])) {\n        return !(new Date(+recurColl[index + 1][this.fields.startTime]).setHours(0, 0, 0, 0) > new Date(+currentData[this.fields.endTime]).setHours(0, 0, 0, 0));\n      }\n\n      return false;\n    } else {\n      if (index === recurColl.length - 1) {\n        if (!(new Date(+recurColl[index - 1][this.fields.endTime]).setHours(0, 0, 0, 0) < new Date(+currentData[this.fields.startTime]).setHours(0, 0, 0, 0))) {\n          return true;\n        }\n      } else if (!(new Date(+recurColl[index - 1][this.fields.endTime]).setHours(0, 0, 0, 0) < new Date(+currentData[this.fields.startTime]).setHours(0, 0, 0, 0) && new Date(+recurColl[index + 1][this.fields.startTime]).setHours(0, 0, 0, 0) > new Date(+currentData[this.fields.endTime]).setHours(0, 0, 0, 0))) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  EventWindow.prototype.resourceSaveEvent = function (eventObj, action, currentAction) {\n    var _this = this;\n\n    var lastResouceData = this.parent.resourceBase.resourceCollection.slice(-1)[0];\n    var resourceData = eventObj[lastResouceData.field];\n    resourceData = resourceData instanceof Array ? resourceData : [resourceData];\n    var lastlevel = this.parent.resourceBase.lastResourceLevel;\n    var eventList = [];\n\n    var _loop_1 = function (i) {\n      var events = extend({}, eventObj, null, true);\n      events[this_1.fields.id] = this_1.parent.eventBase.getEventMaxID();\n      var temp = [];\n\n      var addValues = function () {\n        if (action === 'Save' && i === resourceData.length - 1) {\n          if (temp.length > 0) {\n            temp[0][_this.fields.id] = eventObj[_this.fields.id];\n\n            for (var k = 1; k < temp.length; k++) {\n              temp[k][_this.fields.id] = _this.parent.eventBase.getEventMaxID(i);\n              eventList.push(temp[k]);\n\n              _this.parent.saveEvent(temp[0], currentAction);\n            }\n          } else {\n            events[_this.fields.id] = eventObj[_this.fields.id];\n\n            _this.parent.saveEvent(events, currentAction);\n          }\n        } else {\n          if (temp.length > 0) {\n            for (var j = 0; j < temp.length; j++) {\n              temp[j][_this.fields.id] = _this.parent.eventBase.getEventMaxID(j);\n              eventList.push(temp[j]);\n            }\n          } else {\n            events[_this.fields.id] = _this.parent.eventBase.getEventMaxID(i);\n            eventList.push(events);\n          }\n        }\n      };\n\n      if (this_1.parent.activeViewOptions.group.byGroupID && !isNullOrUndefined(lastlevel)) {\n        var lastResource = lastResouceData.dataSource;\n        var index = util.findIndexInData(lastResource, lastResouceData.idField, resourceData[i]);\n\n        if (index < 0) {\n          return {\n            value: void 0\n          };\n        }\n\n        var groupId_1 = lastResource[index][lastResouceData.groupIDField];\n        var filter = lastlevel.filter(function (obj) {\n          return obj.resourceData[lastResouceData.idField] === resourceData[i];\n        }).filter(function (obj) {\n          return obj.resourceData[lastResouceData.groupIDField] === groupId_1;\n        })[0];\n        var groupOrder = filter.groupOrder;\n\n        for (var index_1 = 0; index_1 < this_1.parent.resourceBase.resourceCollection.length; index_1++) {\n          var field = this_1.parent.resourceBase.resourceCollection[index_1].field;\n          events[field] = groupOrder[index_1] instanceof Array ? groupOrder[index_1][0] : groupOrder[index_1];\n        }\n\n        addValues();\n      } else {\n        for (var index = 0; index < this_1.parent.resourceBase.resourceCollection.length - 1; index++) {\n          var field = this_1.parent.resourceBase.resourceCollection[index].field;\n\n          if (events[field] instanceof Array && events[field].length > 1) {\n            for (var k = 0; k < events[field].length; k++) {\n              var event_3 = extend({}, events, null, true);\n              event_3[field] = eventObj[field][k];\n              event_3[lastResouceData.field] = resourceData[i];\n              temp.push(event_3);\n            }\n          } else {\n            if (temp.length === 0) {\n              events[field] = eventObj[field] instanceof Array ? eventObj[field][0] : eventObj[field];\n              events[lastResouceData.field] = resourceData[i];\n            } else {\n              for (var l = 0; l < temp.length; l++) {\n                temp[l][field] = eventObj[field] instanceof Array ? eventObj[field][0] : eventObj[field];\n              }\n            }\n          }\n        }\n\n        events[lastResouceData.field] = resourceData[i];\n        addValues();\n      }\n    };\n\n    var this_1 = this;\n\n    for (var i = 0; i < resourceData.length; i++) {\n      var state_1 = _loop_1(i);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n\n    if (eventList.length > 0) {\n      for (var _i = 0, eventList_1 = eventList; _i < eventList_1.length; _i++) {\n        var event_4 = eventList_1[_i];\n        event_4[this.fields.recurrenceException] = null;\n        event_4[this.fields.recurrenceID] = null;\n      }\n\n      this.parent.addEvent(eventList);\n    }\n  };\n\n  EventWindow.prototype.getEventIdFromForm = function () {\n    return this.element.querySelector('.' + cls.FORM_CLASS).getAttribute('data-id');\n  };\n\n  EventWindow.prototype.getFormElements = function (className) {\n    var elements = [];\n\n    if (className === cls.EVENT_WINDOW_DIALOG_CLASS) {\n      elements = [].slice.call(this.element.querySelectorAll('.' + EVENT_FIELD));\n    } else {\n      elements = [].slice.call(this.parent.element.querySelectorAll('.' + className + ' .' + EVENT_FIELD));\n    }\n\n    if (!isBlazor()) {\n      return elements;\n    }\n\n    var validElements = [];\n\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n\n      if (element.classList.contains('e-control')) {\n        validElements.push(element);\n      } else if (element.querySelector('.e-control')) {\n        validElements.push(element.querySelector('.e-control'));\n      } else {\n        validElements.push(element);\n      }\n    }\n\n    return validElements;\n  };\n\n  EventWindow.prototype.getValueFromElement = function (element) {\n    var value;\n\n    if (element.classList.contains('e-datepicker')) {\n      value = element.ej2_instances[0].value;\n    } else if (element.classList.contains('e-datetimepicker')) {\n      value = element.ej2_instances[0].value;\n    } else if (element.classList.contains('e-dropdownlist')) {\n      value = element.ej2_instances[0].value;\n    } else if (element.classList.contains('e-multiselect')) {\n      value = element.ej2_instances[0].value;\n    } else if (element.classList.contains('e-checkbox')) {\n      value = element.ej2_instances[0].checked;\n    } else {\n      if (element.type === 'checkbox') {\n        value = element.checked;\n      } else {\n        value = element.value;\n      }\n    }\n\n    return value;\n  };\n\n  EventWindow.prototype.setValueToElement = function (element, value) {\n    if (element.classList.contains('e-datepicker')) {\n      var instance = element.ej2_instances[0];\n      instance.value = value;\n      instance.dataBind();\n    } else if (element.classList.contains('e-datetimepicker')) {\n      var instance = element.ej2_instances[0];\n\n      if (instance.element.classList.contains(cls.EVENT_WINDOW_START_CLASS)) {\n        this.eventWindowTime.startTime = new Date('' + value);\n      } else {\n        this.eventWindowTime.endTime = new Date('' + value);\n      }\n\n      instance.value = value;\n      instance.dataBind();\n    } else if (element.classList.contains('e-dropdownlist')) {\n      var instance = element.ej2_instances[0];\n      instance.value = value;\n      instance.dataBind();\n    } else if (element.classList.contains('e-multiselect')) {\n      var instance = element.ej2_instances[0];\n      instance.value = [];\n      instance.value = value instanceof Array ? value : [value];\n      instance.dataBind();\n    } else if (element.classList.contains('e-checkbox')) {\n      var instance = element.ej2_instances[0];\n      instance.checked = value;\n      instance.dataBind();\n    } else {\n      if (element.type !== 'checkbox') {\n        element.value = value || '';\n      } else {\n        element.checked = value;\n      }\n    }\n  };\n\n  EventWindow.prototype.setDefaultValueToElement = function (element) {\n    if (element.classList.contains('e-datepicker')) {\n      var instance = element.ej2_instances[0];\n      instance.value = this.parent.getCurrentTime();\n      instance.dataBind();\n    } else if (element.classList.contains('e-datetimepicker')) {\n      var instance = element.ej2_instances[0];\n      var dateValue = this.parent.getCurrentTime();\n      this.eventWindowTime = {\n        startTime: dateValue,\n        endTime: dateValue\n      };\n      instance.value = dateValue;\n      instance.dataBind();\n    } else if (element.classList.contains('e-dropdownlist')) {\n      var instance = element.ej2_instances[0];\n      instance.value = null;\n      instance.dataBind();\n    } else if (element.classList.contains('e-multiselect')) {\n      var instance = element.ej2_instances[0];\n      instance.value = [];\n      instance.dataBind();\n    } else if (element.classList.contains('e-checkbox')) {\n      var instance = element.ej2_instances[0];\n      instance.checked = false;\n      instance.dataBind();\n    } else {\n      if (element.type === 'checkbox') {\n        element.checked = false;\n      } else {\n        element.value = '';\n      }\n    }\n  };\n\n  EventWindow.prototype.getInstance = function (className) {\n    var element = this.element.querySelector('.' + className);\n    return element ? element.ej2_instances[0] : null;\n  };\n\n  EventWindow.prototype.eventDelete = function () {\n    switch (this.parent.currentAction) {\n      case 'EditOccurrence':\n        var fields = this.parent.eventFields;\n\n        if (!isNullOrUndefined(this.parent.activeEventData.event[fields.recurrenceRule])) {\n          this.parent.currentAction = 'DeleteOccurrence';\n        } else {\n          this.parent.currentAction = 'Delete';\n        }\n\n        break;\n\n      case 'EditSeries':\n        this.parent.currentAction = 'DeleteSeries';\n        break;\n\n      case 'Save':\n        this.parent.currentAction = 'Delete';\n        break;\n    }\n\n    this.isCrudAction = false;\n    this.dialogObject.hide();\n    this.parent.quickPopup.openDeleteAlert();\n  };\n\n  EventWindow.prototype.getRecurrenceEditorInstance = function () {\n    if (this.parent.isAdaptive && !this.repeatDialogObject) {\n      this.renderRepeatDialog();\n    }\n\n    return this.recurrenceEditor;\n  };\n\n  EventWindow.prototype.destroyComponents = function () {\n    var formelement = this.getFormElements(cls.EVENT_WINDOW_DIALOG_CLASS);\n\n    for (var _i = 0, formelement_2 = formelement; _i < formelement_2.length; _i++) {\n      var element = formelement_2[_i];\n      var instance = void 0;\n\n      if (element.classList.contains('e-datetimepicker')) {\n        instance = element.ej2_instances;\n      } else if (element.classList.contains('e-datepicker')) {\n        instance = element.ej2_instances;\n      } else if (element.classList.contains('e-checkbox')) {\n        instance = element.ej2_instances;\n      } else if (element.classList.contains('e-dropdownlist')) {\n        instance = element.ej2_instances;\n      } else if (element.classList.contains('e-multiselect')) {\n        instance = element.ej2_instances;\n      }\n\n      if (instance && instance[0]) {\n        instance[0].destroy();\n      }\n    }\n\n    if (this.buttonObj) {\n      this.buttonObj.destroy();\n    }\n  };\n  /**\n   * To destroy the event window.\n   * @return {void}\n   * @private\n   */\n\n\n  EventWindow.prototype.destroy = function () {\n    this.resetEditorTemplate();\n\n    if (this.recurrenceEditor) {\n      this.recurrenceEditor.destroy();\n    }\n\n    this.destroyComponents();\n    this.fieldValidator.destroy();\n\n    if (this.repeatDialogObject) {\n      this.repeatDialogObject.destroy();\n      remove(this.repeatDialogObject.element);\n    }\n\n    if (this.dialogObject) {\n      this.dialogObject.destroy();\n      this.dialogObject = null;\n    }\n\n    if (this.element) {\n      remove(this.element);\n      this.element = null;\n    }\n  };\n\n  return EventWindow;\n}();\n\nexport { EventWindow };","map":null,"metadata":{},"sourceType":"module"}