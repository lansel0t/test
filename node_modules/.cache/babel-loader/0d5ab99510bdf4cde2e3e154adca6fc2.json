{"ast":null,"code":"import _defineProperty from \"D:\\\\Programming\\\\Testovoe\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { authAPI } from \"./api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return _objectSpread({}, state, {}, action.data, {\n        isAuth: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login) => ({\n  type: SET_USER_DATA,\n  data: {\n    userId,\n    email,\n    login\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let _response$data$data = response.data.data,\n          id = _response$data$data.id,\n          login = _response$data$data.login,\n          email = _response$data$data.email;\n      dispatch(setAuthUserData(id, email, login));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      let _response$data$data2 = response.data.data,\n          id = _response$data$data2.id,\n          login = _response$data$data2.login,\n          email = _response$data$data2.email;\n      dispatch(setAuthUserData(id, email, login));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["D:/Programming/Testovoe/test/src/redux/auth-reducer.js"],"names":["authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","data","setAuthUserData","getAuthUserData","dispatch","me","then","response","resultCode","id","password","rememberMe"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAIA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,aAAL;AACI,+BACOO,KADP,MAEOC,MAAM,CAACE,IAFd;AAGIL,QAAAA,MAAM,EAAE;AAHZ;;AAMA;AACI,aAAOE,KAAP;AATZ;AAWH,CAZD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,MAA2B;AAACK,EAAAA,IAAI,EAACT,aAAN;AAAqBU,EAAAA,IAAI,EAAE;AAACR,IAAAA,MAAD;AAAQC,IAAAA,KAAR;AAAcC,IAAAA;AAAd;AAA3B,CAA3B,CAAxB;AACP,OAAO,MAAMQ,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/Cd,EAAAA,OAAO,CAACe,EAAR,GACCC,IADD,CACMC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA4B,CAAhC,EAAmC;AAAA,gCACRD,QAAQ,CAACN,IAAT,CAAcA,IADN;AAAA,UAC1BQ,EAD0B,uBAC1BA,EAD0B;AAAA,UACvBd,KADuB,uBACvBA,KADuB;AAAA,UACjBD,KADiB,uBACjBA,KADiB;AAE/BU,MAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKf,KAAL,EAAYC,KAAZ,CAAhB,CAAR;AACH;AACJ,GAND;AAOH,CARM;AAUP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAOgB,QAAP,EAAgBC,UAAhB,KAAgCP,QAAD,IAAc;AAC9Dd,EAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EACCL,IADD,CACMC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA4B,CAAhC,EAAmC;AAAA,iCACRD,QAAQ,CAACN,IAAT,CAAcA,IADN;AAAA,UAC1BQ,EAD0B,wBAC1BA,EAD0B;AAAA,UACvBd,KADuB,wBACvBA,KADuB;AAAA,UACjBD,KADiB,wBACjBA,KADiB;AAE/BU,MAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKf,KAAL,EAAYC,KAAZ,CAAhB,CAAR;AACH;AACJ,GAND;AAOH,CARM;AAYP,eAAeE,WAAf","sourcesContent":["import { authAPI } from \"./api\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n    \r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId, email, login) => ({type:SET_USER_DATA, data: {userId,email,login}})\r\nexport const getAuthUserData = () => (dispatch) => {\r\n    authAPI.me()\r\n    .then(response => {\r\n        if (response.data.resultCode ===0) {\r\n            let {id,login,email} = response.data.data;\r\n            dispatch(setAuthUserData(id, email, login));\r\n        }\r\n    })\r\n}\r\n\r\nexport const login = (email,password,rememberMe) => (dispatch) => {\r\n    authAPI.login(email, password, rememberMe)\r\n    .then(response => {\r\n        if (response.data.resultCode ===0) {\r\n            let {id,login,email} = response.data.data;\r\n            dispatch(setAuthUserData(id, email, login));\r\n        }\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}