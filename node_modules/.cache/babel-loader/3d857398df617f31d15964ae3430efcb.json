{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { append, addClass, createElement } from '@syncfusion/ej2-base';\nimport { Year } from './year';\nimport * as event from '../base/constant';\nimport * as cls from '../base/css-constant';\nimport * as util from '../base/util';\n/**\n * timeline year view\n */\n\nvar TimelineYear =\n/** @class */\nfunction (_super) {\n  __extends(TimelineYear, _super);\n  /**\n   * Constructor for timeline year view\n   */\n\n\n  function TimelineYear(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-timeline-year-view';\n    _this.isInverseTableSelect = true;\n    return _this;\n  }\n  /**\n   * Get module name.\n   */\n\n\n  TimelineYear.prototype.getModuleName = function () {\n    return 'timelineYear';\n  };\n\n  TimelineYear.prototype.renderHeader = function (headerWrapper) {\n    var tr = createElement('tr');\n    headerWrapper.appendChild(tr);\n    tr.appendChild(createElement('td', {\n      className: cls.LEFT_INDENT_CLASS\n    }));\n    var td = createElement('td');\n    tr.appendChild(td);\n    var container = createElement('div', {\n      className: cls.DATE_HEADER_CONTAINER_CLASS\n    });\n    td.appendChild(container);\n    var wrapper = createElement('div', {\n      className: cls.DATE_HEADER_WRAP_CLASS\n    });\n    container.appendChild(wrapper);\n    var table = this.createTableLayout();\n    wrapper.appendChild(table);\n    table.appendChild(this.createTableColGroup(this.columnCount));\n    var innerTr = createElement('tr');\n    table.querySelector('tbody').appendChild(innerTr);\n\n    for (var column = 0; column < this.columnCount; column++) {\n      var innerTd = createElement('td', {\n        className: cls.HEADER_CELLS_CLASS\n      });\n\n      if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n        innerTd.innerHTML = \"<span>\" + this.parent.getDayNames('abbreviated')[column % 7] + \"</span>\";\n      } else {\n        var date = new Date(this.parent.selectedDate.getFullYear(), column, 1);\n        innerTd.innerHTML = \"<span>\" + this.getMonthName(date) + \"</span>\";\n        innerTd.setAttribute('data-date', date.getTime().toString());\n      }\n\n      innerTr.appendChild(innerTd);\n      this.parent.trigger(event.renderCell, {\n        elementType: 'headerCells',\n        element: innerTd\n      });\n    }\n  };\n\n  TimelineYear.prototype.renderContent = function (contentWrapper) {\n    var tr = createElement('tr');\n    contentWrapper.appendChild(tr);\n    var firstTd = createElement('td');\n    var lastTd = createElement('td');\n    append([firstTd, lastTd], tr);\n    var monthWrapper = createElement('div', {\n      className: cls.MONTH_HEADER_WRAPPER\n    });\n    firstTd.appendChild(monthWrapper);\n    monthWrapper.appendChild(this.createTableLayout());\n    var content = createElement('div', {\n      className: cls.CONTENT_WRAP_CLASS\n    });\n    lastTd.appendChild(content);\n    content.appendChild(this.createTableLayout(cls.CONTENT_TABLE_CLASS));\n    var eventWrapper = createElement('div', {\n      className: cls.EVENT_TABLE_CLASS\n    });\n    content.appendChild(eventWrapper);\n    var monthTBody = monthWrapper.querySelector('tbody');\n    var contentTBody = content.querySelector('tbody');\n\n    for (var month = 0; month < this.rowCount; month++) {\n      eventWrapper.appendChild(createElement('div', {\n        className: cls.APPOINTMENT_CONTAINER_CLASS\n      }));\n      var monthDate = new Date(this.parent.selectedDate.getFullYear(), month, 1);\n      var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));\n      var monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));\n      var tr_1 = createElement('tr', {\n        attrs: {\n          'role': 'row'\n        }\n      });\n      var monthTr = tr_1.cloneNode();\n      monthTBody.appendChild(monthTr);\n      var contentTr = tr_1.cloneNode();\n      contentTBody.appendChild(contentTr);\n      var monthTd = createElement('td', {\n        className: cls.MONTH_HEADER_CLASS,\n        attrs: {\n          'role': 'gridcell'\n        }\n      });\n\n      if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n        monthTd.setAttribute('data-date', monthDate.getTime().toString());\n        monthTd.innerHTML = \"<span>\" + this.getMonthName(monthDate) + \"</span>\";\n      } else {\n        monthTd.innerHTML = \"<span>\" + this.parent.getDayNames('abbreviated')[month % 7] + \"</span>\";\n      }\n\n      monthTr.appendChild(monthTd);\n      this.parent.trigger(event.renderCell, {\n        elementType: 'leftHeaderCells',\n        element: monthTd\n      });\n      var date = new Date(monthStart.getTime());\n\n      for (var column = 0; column < this.columnCount; column++) {\n        var isDateAvail = void 0;\n\n        if (this.parent.activeViewOptions.orientation === 'Vertical') {\n          monthDate = new Date(this.parent.selectedDate.getFullYear(), column, 1);\n          monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));\n          monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));\n          var dayDate = month - monthStart.getDay() + 1;\n          date = new Date(this.parent.selectedDate.getFullYear(), column, dayDate);\n          isDateAvail = dayDate > 0 && date.getTime() < monthEnd.getTime();\n        } else {\n          isDateAvail = column >= monthStart.getDay() && date.getTime() < monthEnd.getTime();\n        }\n\n        var td = createElement('td', {\n          className: cls.WORK_CELLS_CLASS,\n          attrs: {\n            'role': 'gridcell',\n            'aria-selected': 'false'\n          }\n        });\n        contentTr.appendChild(td);\n        var dateHeader = createElement('div', {\n          className: cls.DATE_HEADER_CLASS + ' ' + cls.NAVIGATE_CLASS,\n          innerHTML: isDateAvail ? date.getDate().toString() : ''\n        });\n\n        if (this.parent.activeViewOptions.workDays.indexOf(date.getDay()) > -1 && isDateAvail) {\n          var classList = [cls.WORKDAY_CLASS];\n          var tds = [td];\n\n          if (this.isCurrentDate(date)) {\n            classList.push(cls.CURRENT_DAY_CLASS);\n\n            if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n              tds.push(this.element.querySelector('.' + cls.HEADER_CELLS_CLASS + (\":nth-child(\" + (column + 1) + \")\")));\n            } else {\n              tds.push(this.element.querySelectorAll('.' + cls.MONTH_HEADER_CLASS).item(month));\n            }\n          }\n\n          addClass(tds, classList);\n        } else if (!isDateAvail) {\n          addClass([td], cls.OTHERMONTH_CLASS);\n        }\n\n        td.appendChild(dateHeader);\n\n        if (isDateAvail) {\n          td.setAttribute('data-date', date.getTime().toString());\n          this.wireEvents(td, 'cell');\n\n          if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n            date = util.addDays(new Date(date.getTime()), 1);\n          }\n        }\n\n        this.parent.trigger(event.renderCell, {\n          elementType: 'workCells',\n          element: td,\n          date: date\n        });\n      }\n    }\n  };\n\n  return TimelineYear;\n}(Year);\n\nexport { TimelineYear };","map":null,"metadata":{},"sourceType":"module"}