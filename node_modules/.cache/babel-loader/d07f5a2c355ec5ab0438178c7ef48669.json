{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { EventHandler, formatUnit, remove, createElement, addClass, closest, prepend } from '@syncfusion/ej2-base';\nimport { ViewBase } from './view-base';\nimport { WorkCellInteraction } from '../actions/work-cells';\nimport { YearEvent } from '../event-renderer/year';\nimport * as util from '../base/util';\nimport * as event from '../base/constant';\nimport * as cls from '../base/css-constant';\n/**\n * year view\n */\n\nvar Year =\n/** @class */\nfunction (_super) {\n  __extends(Year, _super);\n  /**\n   * Constructor for year view\n   */\n\n\n  function Year(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-year-view';\n    _this.isInverseTableSelect = false;\n    _this.workCellAction = new WorkCellInteraction(parent);\n    return _this;\n  }\n\n  Year.prototype.renderLayout = function (className) {\n    this.setPanel(createElement('div', {\n      className: cls.TABLE_WRAP_CLASS\n    }));\n    var viewTypeClass = this.parent.activeViewOptions.orientation === 'Horizontal' ? 'e-horizontal' : 'e-vertical';\n    addClass([this.element], [this.viewClass, viewTypeClass, className]);\n    this.renderPanel(className);\n    var calendarTable = this.createTableLayout(cls.OUTER_TABLE_CLASS);\n    this.element.appendChild(calendarTable);\n    var calendarTBody = calendarTable.querySelector('tbody');\n    this.rowCount = this.getRowColumnCount('row');\n    this.columnCount = this.getRowColumnCount('column');\n    this.renderHeader(calendarTBody);\n    this.renderContent(calendarTBody);\n\n    if (this.parent.uiStateValues.isGroupAdaptive) {\n      this.generateColumnLevels();\n      this.renderResourceMobileLayout();\n    }\n\n    this.wireEvents(this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS), 'scroll');\n    this.parent.notify(event.contentReady, {});\n  }; // tslint:disable-next-line:no-empty\n\n\n  Year.prototype.renderHeader = function (headerWrapper) {};\n\n  Year.prototype.renderContent = function (content) {\n    var tr = createElement('tr');\n    content.appendChild(tr);\n    var td = createElement('td');\n    tr.appendChild(td);\n    this.element.querySelector('tbody').appendChild(tr);\n    var contentWrapper = createElement('div', {\n      className: cls.CONTENT_WRAP_CLASS\n    });\n    td.appendChild(contentWrapper);\n    var calendarTable = this.createTableLayout('e-calendar-table');\n    contentWrapper.appendChild(calendarTable);\n    var cTr = createElement('tr');\n    calendarTable.querySelector('tbody').appendChild(cTr);\n    var cTd = createElement('td');\n    cTr.appendChild(cTd);\n    var calendarWrapper = createElement('div', {\n      className: 'e-calendar-wrapper'\n    });\n    cTd.appendChild(calendarWrapper);\n    var monthCollection = Array.apply(null, {\n      length: 12\n    }).map(function (value, index) {\n      return index;\n    });\n\n    for (var _i = 0, monthCollection_1 = monthCollection; _i < monthCollection_1.length; _i++) {\n      var month = monthCollection_1[_i];\n      var currentMonth = new Date(this.parent.selectedDate.getFullYear(), month, this.parent.selectedDate.getDate());\n      var calendarElement = createElement('div', {\n        className: 'e-month-calendar e-calendar',\n        attrs: {\n          'data-role': 'calendar'\n        }\n      });\n      calendarElement.appendChild(this.renderCalendarHeader(currentMonth));\n      calendarElement.appendChild(this.renderCalendarContent(currentMonth));\n      calendarWrapper.appendChild(calendarElement);\n    }\n  };\n\n  Year.prototype.renderCalendarHeader = function (currentDate) {\n    var headerWrapper = createElement('div', {\n      className: 'e-header e-month'\n    });\n    var headerContent = createElement('div', {\n      className: 'e-day e-title',\n      innerHTML: this.getMonthName(currentDate)\n    });\n    headerWrapper.appendChild(headerContent);\n    this.parent.trigger(event.renderCell, {\n      elementType: 'headerCells',\n      element: headerContent,\n      date: currentDate\n    });\n    return headerWrapper;\n  };\n\n  Year.prototype.renderCalendarContent = function (currentDate) {\n    var dateCollection = this.getMonthDates(currentDate);\n    var contentWrapper = createElement('div', {\n      className: 'e-content e-month'\n    });\n    var contentTable = this.createTableLayout('e-calendar-table ' + cls.CONTENT_TABLE_CLASS);\n    contentWrapper.appendChild(contentTable);\n    var thead = createElement('thead', {\n      className: 'e-week-header'\n    });\n    var tr = createElement('tr');\n    var currentWeek = util.getWeekFirstDate(util.firstDateOfMonth(currentDate), this.parent.firstDayOfWeek);\n\n    for (var i = 0; i < util.WEEK_LENGTH; i++) {\n      tr.appendChild(createElement('th', {\n        innerHTML: this.parent.getDayNames('narrow')[currentWeek.getDay()]\n      }));\n      currentWeek = new Date(currentWeek.getTime() + util.MS_PER_DAY);\n    }\n\n    thead.appendChild(tr);\n    prepend([thead], contentTable);\n    var tbody = contentTable.querySelector('tbody');\n\n    while (dateCollection.length > 0) {\n      var weekDates = dateCollection.splice(0, util.WEEK_LENGTH);\n      var tr_1 = createElement('tr', {\n        attrs: {\n          'role': 'row'\n        }\n      });\n\n      if (this.parent.activeViewOptions.showWeekNumber) {\n        var weekNumber = util.getWeekNumber(weekDates.slice(-1)[0]);\n        var td = createElement('td', {\n          className: 'e-week-number',\n          attrs: {\n            'role': 'gridcell',\n            'title': 'Week ' + weekNumber\n          },\n          innerHTML: weekNumber.toString()\n        });\n        tr_1.appendChild(td);\n        this.parent.trigger(event.renderCell, {\n          elementType: 'weekNumberCells',\n          element: td\n        });\n      }\n\n      for (var _i = 0, weekDates_1 = weekDates; _i < weekDates_1.length; _i++) {\n        var date = weekDates_1[_i];\n        var td = createElement('td', {\n          className: 'e-cell ' + cls.WORK_CELLS_CLASS,\n          attrs: {\n            'role': 'gridcell',\n            'aria-selected': 'false',\n            'data-date': date.getTime().toString()\n          }\n        });\n        td.appendChild(createElement('span', {\n          className: 'e-day',\n          innerHTML: date.getDate().toString()\n        }));\n        var classList = [];\n\n        if (currentDate.getMonth() !== date.getMonth()) {\n          classList.push(cls.OTHERMONTH_CLASS);\n        }\n\n        if (this.isCurrentDate(date) && currentDate.getMonth() === date.getMonth()) {\n          classList = classList.concat(['e-today', 'e-selected']);\n        }\n\n        if (classList.length > 0) {\n          addClass([td], classList);\n        }\n\n        tr_1.appendChild(td);\n        this.wireEvents(td, 'cell');\n        this.parent.trigger(event.renderCell, {\n          elementType: 'workCells',\n          element: td,\n          date: date\n        });\n      }\n\n      tbody.appendChild(tr_1);\n    }\n\n    return contentWrapper;\n  };\n\n  Year.prototype.createTableColGroup = function (count) {\n    var colGroupEle = createElement('colgroup');\n\n    for (var i = 0; i < count; i++) {\n      colGroupEle.appendChild(createElement('col'));\n    }\n\n    return colGroupEle;\n  };\n\n  Year.prototype.getMonthName = function (date) {\n    return this.parent.globalize.formatDate(date, {\n      format: this.parent.activeViewOptions.dateFormat || 'MMMM',\n      calendar: this.parent.getCalendarMode()\n    });\n  };\n\n  Year.prototype.generateColumnLevels = function () {\n    var colLevels = [];\n    var level = this.getDateSlots([this.parent.selectedDate], this.parent.activeViewOptions.workDays);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      colLevels = this.parent.resourceBase.generateResourceLevels(level);\n\n      if (this.parent.uiStateValues.isGroupAdaptive) {\n        var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n        colLevels = [this.getDateSlots([this.parent.selectedDate], resourceLevel.workDays)];\n      }\n    } else {\n      colLevels.push(level);\n    }\n\n    colLevels.pop();\n    this.colLevels = colLevels;\n    return colLevels;\n  };\n\n  Year.prototype.getDateSlots = function (renderDates, workDays, startHour, endHour) {\n    if (startHour === void 0) {\n      startHour = this.parent.workHours.start;\n    }\n\n    if (endHour === void 0) {\n      endHour = this.parent.workHours.end;\n    }\n\n    var dateCol = [{\n      date: renderDates[0],\n      type: 'dateHeader',\n      className: [cls.HEADER_CELLS_CLASS],\n      colSpan: 1,\n      workDays: workDays,\n      startHour: new Date(+this.parent.globalize.parseDate(startHour, {\n        skeleton: 'Hm'\n      })),\n      endHour: new Date(+this.parent.globalize.parseDate(endHour, {\n        skeleton: 'Hm'\n      }))\n    }];\n    return dateCol;\n  };\n\n  Year.prototype.getMonthDates = function (date) {\n    var startDate = util.getWeekFirstDate(util.firstDateOfMonth(date), this.parent.firstDayOfWeek);\n    var endDate = util.addDays(new Date(+startDate), 6 * util.WEEK_LENGTH);\n    var dateCollection = [];\n\n    for (var start = startDate.getTime(); start < endDate.getTime(); start = start + util.MS_PER_DAY) {\n      dateCollection.push(util.resetTime(new Date(start)));\n    }\n\n    return dateCollection;\n  };\n\n  Year.prototype.getRowColumnCount = function (type) {\n    var monthCount = 12;\n    var year = this.parent.selectedDate.getFullYear();\n    var months = [];\n\n    for (var month = 0; month < monthCount; month++) {\n      months.push(new Date(year, month, 1).getDay() + new Date(year, month + 1, 0).getDate());\n    }\n\n    var maxCount = Math.max.apply(Math, months);\n    var count;\n\n    if (type === 'row') {\n      count = this.parent.activeViewOptions.orientation === 'Horizontal' ? monthCount : maxCount;\n    } else {\n      count = this.parent.activeViewOptions.orientation === 'Horizontal' ? maxCount : monthCount;\n    }\n\n    return count;\n  };\n\n  Year.prototype.isCurrentDate = function (date) {\n    return util.resetTime(new Date()).getTime() === util.resetTime(new Date(date.getTime())).getTime();\n  };\n\n  Year.prototype.onCellClick = function (e) {\n    var target = closest(e.target, '.' + cls.WORK_CELLS_CLASS);\n    var startDate = new Date(parseInt(target.getAttribute('data-date'), 10));\n    var endDate = util.addDays(new Date(startDate.getTime()), 1);\n    var filteredEvents = this.parent.eventBase.filterEvents(startDate, endDate);\n    var moreEventArgs = {\n      date: startDate,\n      event: filteredEvents,\n      element: e.target\n    };\n    this.parent.quickPopup.moreEventClick(moreEventArgs, new Date());\n  };\n\n  Year.prototype.onContentScroll = function (e) {\n    var target = e.target;\n    var headerWrapper = this.getDatesHeaderElement();\n\n    if (headerWrapper) {\n      headerWrapper.firstChild.scrollLeft = target.scrollLeft;\n    }\n\n    var monthWrapper = this.element.querySelector('.' + cls.MONTH_HEADER_WRAPPER);\n\n    if (monthWrapper) {\n      monthWrapper.scrollTop = target.scrollTop;\n    }\n  };\n\n  Year.prototype.onScrollUiUpdate = function (args) {\n    var height = this.parent.element.offsetHeight - this.getHeaderBarHeight();\n    var headerWrapper = this.element.querySelector('.' + cls.DATE_HEADER_CONTAINER_CLASS);\n\n    if (headerWrapper) {\n      height -= headerWrapper.offsetHeight;\n    }\n\n    var contentWrapper = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n\n    if (contentWrapper) {\n      contentWrapper.style.height = formatUnit(height);\n    }\n\n    var leftPanelElement = this.element.querySelector('.' + cls.MONTH_HEADER_WRAPPER);\n\n    if (leftPanelElement) {\n      leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(contentWrapper));\n    }\n\n    if (!this.parent.isAdaptive && headerWrapper) {\n      var scrollBarWidth = util.getScrollBarWidth(); // tslint:disable:no-any\n\n      if (contentWrapper.offsetWidth - contentWrapper.clientWidth > 0) {\n        headerWrapper.firstChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';\n        headerWrapper.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';\n      } else {\n        headerWrapper.firstChild.style[args.cssProperties.border] = '';\n        headerWrapper.style[args.cssProperties.padding] = '';\n      } // tslint:enable:no-any\n\n    }\n  };\n\n  Year.prototype.startDate = function () {\n    var startDate = new Date(this.parent.selectedDate.getFullYear(), 0, 1);\n    return util.getWeekFirstDate(startDate, this.parent.firstDayOfWeek);\n  };\n\n  Year.prototype.endDate = function () {\n    var endDate = new Date(this.parent.selectedDate.getFullYear(), 11, 31);\n    return util.addDays(util.getWeekLastDate(endDate, this.parent.firstDayOfWeek), 1);\n  };\n\n  Year.prototype.getEndDateFromStartDate = function (start) {\n    return util.addDays(new Date(start.getTime()), 1);\n  };\n\n  Year.prototype.getNextPreviousDate = function (type) {\n    return util.addYears(this.parent.selectedDate, type === 'next' ? 1 : -1);\n  };\n\n  Year.prototype.getDateRangeText = function () {\n    return this.parent.globalize.formatDate(this.parent.selectedDate, {\n      skeleton: 'y'\n    });\n  };\n\n  Year.prototype.addEventListener = function () {\n    this.parent.on(event.scrollUiUpdate, this.onScrollUiUpdate, this);\n    this.parent.on(event.dataReady, this.onDataReady, this);\n  };\n\n  Year.prototype.removeEventListener = function () {\n    this.parent.off(event.scrollUiUpdate, this.onScrollUiUpdate);\n    this.parent.off(event.dataReady, this.onDataReady);\n  };\n\n  Year.prototype.onDataReady = function (args) {\n    var yearEventModule = new YearEvent(this.parent);\n    yearEventModule.renderAppointments();\n    this.parent.notify('events-loaded', args);\n  };\n\n  Year.prototype.wireEvents = function (element, type) {\n    if (type === 'cell') {\n      if (this.parent.currentView !== 'TimelineYear') {\n        EventHandler.add(element, 'click', this.onCellClick, this);\n      } else {\n        EventHandler.add(element, 'click', this.workCellAction.cellClick, this.workCellAction);\n\n        if (!this.parent.isAdaptive) {\n          EventHandler.add(element, 'dblclick', this.workCellAction.cellDblClick, this.workCellAction);\n        }\n      }\n    } else {\n      EventHandler.add(element, 'scroll', this.onContentScroll, this);\n    }\n  };\n  /**\n   * Get module name.\n   */\n\n\n  Year.prototype.getModuleName = function () {\n    return 'year';\n  };\n  /**\n   * To destroy the year.\n   * @return {void}\n   * @private\n   */\n\n\n  Year.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    if (this.element) {\n      if (this.parent.resourceBase) {\n        this.parent.resourceBase.destroy();\n      }\n\n      remove(this.element);\n      this.element = null;\n    }\n  };\n\n  return Year;\n}(ViewBase);\n\nexport { Year };","map":null,"metadata":{},"sourceType":"module"}