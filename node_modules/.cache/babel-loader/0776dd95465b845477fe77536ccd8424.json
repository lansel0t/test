{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { addClass, append, createElement, extend, remove } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, EventHandler } from '@syncfusion/ej2-base';\nimport { TimelineEvent } from './timeline-view';\nimport * as util from '../base/util';\nimport * as events from '../base/constant';\nimport * as cls from '../base/css-constant';\nvar EVENT_GAP = 2;\n/**\n * Year view events render\n */\n\nvar YearEvent =\n/** @class */\nfunction (_super) {\n  __extends(YearEvent, _super);\n  /**\n   * Constructor for year events\n   */\n\n\n  function YearEvent(parent) {\n    return _super.call(this, parent, 'day') || this;\n  }\n\n  YearEvent.prototype.renderAppointments = function () {\n    this.fields = this.parent.eventFields;\n    var eventWrapper = this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_WRAPPER_CLASS);\n    eventWrapper.forEach(function (node) {\n      return remove(node);\n    });\n    this.renderedEvents = [];\n\n    if (this.parent.currentView !== 'TimelineYear') {\n      this.yearViewEvents();\n    } else {\n      this.timelineYearViewEvents();\n    }\n\n    this.parent.notify(events.contentReady, {});\n  };\n\n  YearEvent.prototype.yearViewEvents = function () {\n    for (var month = 0; month < 12; month++) {\n      var queryString = \".e-month-calendar:nth-child(\" + (month + 1) + \") td.e-work-cells\";\n      var workCells = [].slice.call(this.parent.element.querySelectorAll(queryString));\n      var monthDate = new Date(this.parent.selectedDate.getFullYear(), month, this.parent.selectedDate.getDate());\n      var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));\n      var monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));\n      var startDate = util.getWeekFirstDate(monthStart, this.parent.firstDayOfWeek);\n      var endDate = util.addDays(util.getWeekLastDate(monthEnd, this.parent.firstDayOfWeek), 1);\n\n      for (var index = 0; startDate.getTime() < endDate.getTime(); index++) {\n        var start = util.resetTime(new Date(startDate.getTime()));\n        var end = util.addDays(new Date(start.getTime()), 1);\n        var filterEvents = this.parent.eventBase.filterEvents(start, end);\n\n        if (filterEvents.length > 0) {\n          var workCell = workCells[index];\n\n          if (workCell) {\n            workCell.appendChild(createElement('div', {\n              className: cls.APPOINTMENT_CLASS\n            }));\n          }\n        }\n\n        startDate = util.addDays(new Date(startDate.getTime()), 1);\n      }\n    }\n  };\n\n  YearEvent.prototype.timelineYearViewEvents = function () {\n    var workCell = this.parent.element.querySelector('.' + cls.WORK_CELLS_CLASS);\n    this.cellWidth = workCell.offsetWidth;\n    this.cellHeight = workCell.offsetHeight;\n    this.cellHeader = workCell.querySelector('.' + cls.DATE_HEADER_CLASS).offsetHeight;\n    var eventTable = this.parent.element.querySelector('.' + cls.EVENT_TABLE_CLASS);\n    this.eventHeight = util.getElementHeightFromClass(eventTable, cls.APPOINTMENT_CLASS);\n    var wrapperCollection = this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_CONTAINER_CLASS);\n\n    for (var row = 0; row < 12; row++) {\n      var wrapper = wrapperCollection.item(row);\n      var eventWrapper = createElement('div', {\n        className: cls.APPOINTMENT_WRAPPER_CLASS\n      });\n      wrapper.appendChild(eventWrapper);\n      var monthStart = new Date(this.parent.selectedDate.getFullYear(), row, 1);\n      var monthEnd = new Date(monthStart.getFullYear(), monthStart.getMonth() + 1, 0);\n      var dayIndex = monthStart.getDay();\n\n      while (monthStart.getTime() <= monthEnd.getTime()) {\n        var leftValue = void 0;\n\n        if (this.parent.activeViewOptions.orientation === 'Vertical') {\n          var wrapper_1 = wrapperCollection.item(dayIndex);\n          var eventWrapper_1 = wrapper_1.querySelector('.' + cls.APPOINTMENT_WRAPPER_CLASS);\n\n          if (!eventWrapper_1) {\n            eventWrapper_1 = createElement('div', {\n              className: cls.APPOINTMENT_WRAPPER_CLASS\n            });\n            wrapper_1.appendChild(eventWrapper_1);\n          }\n\n          leftValue = row * this.cellWidth;\n        } else {\n          leftValue = (dayIndex + monthStart.getDate() - 1) * this.cellWidth;\n        }\n\n        var dayStart = util.resetTime(new Date(monthStart.getTime()));\n        var dayEnd = util.addDays(new Date(dayStart.getTime()), 1);\n        var dayEvents = this.parent.eventBase.filterEvents(dayStart, dayEnd);\n\n        var _loop_1 = function (index, count) {\n          var eventData = extend({}, dayEvents[index], null, true);\n          var overlapIndex = this_1.getIndex(eventData[this_1.fields.startTime]);\n          eventData.Index = overlapIndex;\n          var availedHeight = this_1.cellHeader + this_1.eventHeight * (index + 1) + EVENT_GAP + this_1.moreIndicatorHeight;\n\n          if (this_1.parent.activeViewOptions.orientation === 'Horizontal') {\n            var isRendered = this_1.renderedEvents.filter(function (eventObj) {\n              return eventObj.Guid === eventData.Guid;\n            });\n\n            if (isRendered.length > 0) {\n              return \"continue\";\n            }\n          }\n\n          if (this_1.cellHeight > availedHeight) {\n            this_1.renderEvent(eventWrapper, eventData, row, leftValue, overlapIndex, dayIndex);\n          } else {\n            var moreIndex = this_1.parent.activeViewOptions.orientation === 'Horizontal' ? row : dayIndex;\n            this_1.renderMoreIndicatior(eventWrapper, count - index, dayStart, moreIndex, leftValue, dayEvents);\n\n            if (this_1.parent.activeViewOptions.orientation === 'Horizontal') {\n              for (var a = index; a < dayEvents.length; a++) {\n                var moreData = extend({}, dayEvents[a], {\n                  Index: overlapIndex + a\n                }, true);\n                this_1.renderedEvents.push(moreData);\n              }\n            }\n\n            return \"break\";\n          }\n        };\n\n        var this_1 = this;\n\n        for (var index = 0, count = dayEvents.length; index < count; index++) {\n          var state_1 = _loop_1(index, count);\n\n          if (state_1 === \"break\") break;\n        }\n\n        monthStart = util.addDays(new Date(monthStart.getTime()), 1);\n\n        if (this.parent.activeViewOptions.orientation === 'Vertical') {\n          dayIndex++;\n          this.renderedEvents = [];\n        }\n      }\n    }\n  };\n\n  YearEvent.prototype.renderEvent = function (wrapper, eventData, row, left, overlapCount, rowIndex) {\n    var _this = this;\n\n    var eventObj = this.isSpannedEvent(eventData, row);\n    var wrap = this.createEventElement(eventObj);\n    var width;\n    var top;\n\n    if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n      width = eventObj.isSpanned.count * this.cellWidth;\n      top = this.cellHeader + this.eventHeight * overlapCount + EVENT_GAP + this.cellHeight * row;\n    } else {\n      width = this.cellWidth;\n      top = this.cellHeight * rowIndex + this.cellHeader + this.eventHeight * overlapCount + EVENT_GAP;\n    }\n\n    setStyleAttribute(wrap, {\n      'width': width + 'px',\n      'height': this.eventHeight + 'px',\n      'left': left + 'px',\n      'top': top + 'px'\n    });\n    var args = {\n      data: eventObj,\n      element: wrap,\n      cancel: false,\n      type: 'event'\n    };\n    this.parent.trigger(events.eventRendered, args, function (eventArgs) {\n      if (!eventArgs.cancel) {\n        wrapper.appendChild(wrap);\n\n        _this.wireAppointmentEvents(wrap, eventObj, true);\n\n        _this.renderedEvents.push(extend({}, eventObj, null, true));\n      }\n    });\n  };\n\n  YearEvent.prototype.renderMoreIndicatior = function (wrapper, count, startDate, row, left, events) {\n    var endDate = util.addDays(new Date(startDate.getTime()), 1);\n    var moreIndicator = this.getMoreIndicatorElement(count, startDate, endDate);\n    var rowTr = this.parent.element.querySelector(\".e-content-wrap tr:nth-child(\" + (row + 1) + \")\");\n    var top = rowTr.offsetTop + (this.cellHeight - this.moreIndicatorHeight);\n    left = Math.floor(left / this.cellWidth) * this.cellWidth;\n    setStyleAttribute(moreIndicator, {\n      'width': this.cellWidth + 'px',\n      'left': left + 'px',\n      'top': top + 'px'\n    });\n    wrapper.appendChild(moreIndicator);\n    EventHandler.add(moreIndicator, 'click', this.moreIndicatorClick, this);\n  };\n\n  YearEvent.prototype.createEventElement = function (record) {\n    var eventSubject = record[this.fields.subject] || this.parent.eventSettings.fields.subject.default;\n    var eventWrapper = createElement('div', {\n      className: cls.APPOINTMENT_CLASS,\n      attrs: {\n        'data-id': 'Appointment_' + record[this.fields.id],\n        'data-guid': record.Guid,\n        'role': 'button',\n        'tabindex': '0',\n        'aria-readonly': this.parent.eventBase.getReadonlyAttribute(record),\n        'aria-selected': 'false',\n        'aria-grabbed': 'true',\n        'aria-label': eventSubject\n      }\n    });\n\n    if (this.cssClass) {\n      addClass([eventWrapper], this.cssClass);\n    }\n\n    if (record[this.fields.isReadonly]) {\n      addClass([eventWrapper], cls.READ_ONLY);\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      var resIndex = this.getGroupIndexFromEvent(record);\n      eventWrapper.setAttribute('data-group-index', resIndex.toString());\n    }\n\n    var templateElement = [];\n    var eventObj = extend({}, record, null, true);\n\n    if (this.parent.activeViewOptions.eventTemplate) {\n      var templateId = this.parent.element.id + '_' + this.parent.activeViewOptions.eventTemplateName + 'eventTemplate';\n      var templateArgs = util.addLocalOffsetToEvent(eventObj, this.parent.eventFields);\n      templateElement = this.parent.getAppointmentTemplate()(templateArgs, this.parent, 'eventTemplate', templateId, false);\n    } else {\n      var locationEle = record[this.fields.location] || this.parent.eventSettings.fields.location.default || '';\n      var subjectEle = createElement('div', {\n        className: cls.SUBJECT_CLASS,\n        innerHTML: eventSubject + (locationEle ? ';&nbsp' + locationEle : '')\n      });\n      var startTimeEle = createElement('div', {\n        className: cls.APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + cls.DISABLE_CLASS : ''),\n        innerHTML: this.parent.getTimeString(eventObj[this.fields.startTime])\n      });\n      var endTimeEle = createElement('div', {\n        className: cls.APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + cls.DISABLE_CLASS : ''),\n        innerHTML: this.parent.getTimeString(eventObj[this.fields.endTime])\n      });\n      addClass([subjectEle], 'e-text-center');\n\n      if (record[this.fields.isAllDay]) {\n        templateElement = [subjectEle];\n      } else if (!eventObj.isLeft && !eventObj.isRight) {\n        templateElement = [startTimeEle, subjectEle, endTimeEle];\n      } else {\n        if (!eventObj.isLeft) {\n          templateElement.push(startTimeEle);\n        }\n\n        templateElement.push(subjectEle);\n\n        if (!eventObj.isRight) {\n          templateElement.push(endTimeEle);\n        }\n      }\n    }\n\n    var appointmentDetails = createElement('div', {\n      className: cls.APPOINTMENT_DETAILS\n    });\n    append(templateElement, appointmentDetails);\n    eventWrapper.appendChild(appointmentDetails);\n    this.applyResourceColor(eventWrapper, eventObj, 'backgroundColor', this.groupOrder);\n    return eventWrapper;\n  };\n\n  YearEvent.prototype.isSpannedEvent = function (eventObj, month) {\n    var monthStart = new Date(this.parent.selectedDate.getFullYear(), month, 1);\n    var monthEnd = util.addDays(new Date(this.parent.selectedDate.getFullYear(), month + 1, 0), 1);\n    var eventData = extend({}, eventObj, null, true);\n    var eventStart = eventData[this.fields.startTime];\n    var eventEnd = eventData[this.fields.endTime];\n    eventData.isSpanned = {\n      count: Math.ceil((eventEnd.getTime() - eventStart.getTime()) / util.MS_PER_DAY),\n      isLeft: eventStart.getTime() < monthStart.getTime(),\n      isRight: eventEnd.getTime() > monthEnd.getTime()\n    };\n    return eventData;\n  };\n\n  YearEvent.prototype.getOverlapEvents = function (date, appointments) {\n    var appointmentsList = [];\n\n    for (var _i = 0, _a = appointments; _i < _a.length; _i++) {\n      var app = _a[_i];\n      var appStart = new Date(app[this.fields.startTime].getTime());\n      var appEnd = new Date(app[this.fields.endTime].getTime());\n\n      if (util.resetTime(appStart).getTime() <= util.resetTime(new Date(date.getTime())).getTime() && util.resetTime(appEnd).getTime() >= util.resetTime(new Date(date.getTime())).getTime()) {\n        appointmentsList.push(app);\n      }\n    }\n\n    return appointmentsList;\n  };\n\n  return YearEvent;\n}(TimelineEvent);\n\nexport { YearEvent };","map":null,"metadata":{},"sourceType":"module"}